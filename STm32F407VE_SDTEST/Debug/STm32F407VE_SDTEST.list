
STm32F407VE_SDTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006280  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006540  08006540  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006548  08006548  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000073c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000748  20000748  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c80e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc3  00000000  00000000  0002c84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002e810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a8  00000000  00000000  0002f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002204a  00000000  00000000  0002fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de40  00000000  00000000  00051cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c816c  00000000  00000000  0005faf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127c5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a9c  00000000  00000000  00127cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080063f0 	.word	0x080063f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080063f0 	.word	0x080063f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b0a8      	sub	sp, #160	; 0xa0
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res;                                          /* FatFs function common result code */
	  uint32_t byteswritten, bytesread;                     /* File write/read counts */
	  uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 80004d2:	4b49      	ldr	r3, [pc, #292]	; (80005f8 <main+0x12c>)
 80004d4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80004d8:	461d      	mov	r5, r3
 80004da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e2:	682b      	ldr	r3, [r5, #0]
 80004e4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa89 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f895 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f91b 	bl	8000728 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80004f2:	f000 f8f9 	bl	80006e8 <MX_SDIO_SD_Init>
  /*MX_USART2_UART_Init();
  MX_FATFS_Init();*/
  /* USER CODE BEGIN 2 */
  /*##-1- Link the micro SD disk I/O driver ##################################*/
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80004f6:	4941      	ldr	r1, [pc, #260]	; (80005fc <main+0x130>)
 80004f8:	4841      	ldr	r0, [pc, #260]	; (8000600 <main+0x134>)
 80004fa:	f005 fef7 	bl	80062ec <FATFS_LinkDriver>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d174      	bne.n	80005ee <main+0x122>
  {
    /*##-2- Register the file system object to the FatFs module ##############*/
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8000504:	2200      	movs	r2, #0
 8000506:	493d      	ldr	r1, [pc, #244]	; (80005fc <main+0x130>)
 8000508:	483e      	ldr	r0, [pc, #248]	; (8000604 <main+0x138>)
 800050a:	f004 fd17 	bl	8004f3c <f_mount>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <main+0x4e>
    {
      /* FatFs Initialization Error */
      Error_Handler();
 8000514:	f000 f976 	bl	8000804 <Error_Handler>
 8000518:	e069      	b.n	80005ee <main+0x122>
    }
    else
    {
      /*##-3- Create a FAT file system (format) on the logical drive #########*/
      /* WARNING: Formatting the uSD card will delete all content on the device */
      if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, buffer, sizeof(buffer)) != FR_OK)
 800051a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	4b39      	ldr	r3, [pc, #228]	; (8000608 <main+0x13c>)
 8000522:	2200      	movs	r2, #0
 8000524:	2107      	movs	r1, #7
 8000526:	4835      	ldr	r0, [pc, #212]	; (80005fc <main+0x130>)
 8000528:	f005 fa68 	bl	80059fc <f_mkfs>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <main+0x6c>
      {
        /* FatFs Format Error */
        Error_Handler();
 8000532:	f000 f967 	bl	8000804 <Error_Handler>
 8000536:	e05a      	b.n	80005ee <main+0x122>
      }
      else
      {
        /*##-4- Create and Open a new text file object with write access #####*/
        if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000538:	220a      	movs	r2, #10
 800053a:	4934      	ldr	r1, [pc, #208]	; (800060c <main+0x140>)
 800053c:	4834      	ldr	r0, [pc, #208]	; (8000610 <main+0x144>)
 800053e:	f004 fd43 	bl	8004fc8 <f_open>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <main+0x82>
        {
          /* 'STM32.TXT' file Open for write Error */
          Error_Handler();
 8000548:	f000 f95c 	bl	8000804 <Error_Handler>
 800054c:	e04f      	b.n	80005ee <main+0x122>
        }
        else
        {
          /*##-5- Write data to the text file ################################*/
          res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 800054e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000552:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000556:	2221      	movs	r2, #33	; 0x21
 8000558:	482d      	ldr	r0, [pc, #180]	; (8000610 <main+0x144>)
 800055a:	f005 f832 	bl	80055c2 <f_write>
 800055e:	4603      	mov	r3, r0
 8000560:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

          /*##-6- Close the open text file #################################*/
          if (f_close(&MyFile) != FR_OK )
 8000564:	482a      	ldr	r0, [pc, #168]	; (8000610 <main+0x144>)
 8000566:	f005 fa1f 	bl	80059a8 <f_close>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <main+0xa8>
          {
            Error_Handler();
 8000570:	f000 f948 	bl	8000804 <Error_Handler>
          }

          if((byteswritten == 0) || (res != FR_OK))
 8000574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000578:	2b00      	cmp	r3, #0
 800057a:	d003      	beq.n	8000584 <main+0xb8>
 800057c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <main+0xbe>
          {
            /* 'STM32.TXT' file Write or EOF Error */
            Error_Handler();
 8000584:	f000 f93e 	bl	8000804 <Error_Handler>
 8000588:	e031      	b.n	80005ee <main+0x122>
          }
          else
          {
            /*##-7- Open the text file object with read access ###############*/
            if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 800058a:	2201      	movs	r2, #1
 800058c:	491f      	ldr	r1, [pc, #124]	; (800060c <main+0x140>)
 800058e:	4820      	ldr	r0, [pc, #128]	; (8000610 <main+0x144>)
 8000590:	f004 fd1a 	bl	8004fc8 <f_open>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <main+0xd4>
            {
              /* 'STM32.TXT' file Open for read Error */
              Error_Handler();
 800059a:	f000 f933 	bl	8000804 <Error_Handler>
 800059e:	e026      	b.n	80005ee <main+0x122>
            }
            else
            {
              /*##-8- Read data from the text file ###########################*/
              res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 80005a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	2264      	movs	r2, #100	; 0x64
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <main+0x144>)
 80005aa:	f004 fecb 	bl	8005344 <f_read>
 80005ae:	4603      	mov	r3, r0
 80005b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

              if((bytesread == 0) || (res != FR_OK))
 80005b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d003      	beq.n	80005c4 <main+0xf8>
 80005bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <main+0xfe>
              {
                /* 'STM32.TXT' file Read or EOF Error */
                Error_Handler();
 80005c4:	f000 f91e 	bl	8000804 <Error_Handler>
 80005c8:	e011      	b.n	80005ee <main+0x122>
              }
              else
              {
                /*##-9- Close the open text file #############################*/
                f_close(&MyFile);
 80005ca:	4811      	ldr	r0, [pc, #68]	; (8000610 <main+0x144>)
 80005cc:	f005 f9ec 	bl	80059a8 <f_close>

                /*##-10- Compare read data with the expected data ############*/
                if((bytesread != byteswritten))
 80005d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80005d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80005d8:	429a      	cmp	r2, r3
 80005da:	d002      	beq.n	80005e2 <main+0x116>
                {
                  /* Read data is different from the expected data */
                  Error_Handler();
 80005dc:	f000 f912 	bl	8000804 <Error_Handler>
 80005e0:	e005      	b.n	80005ee <main+0x122>
                }
                else
                {
                  /* Success of the demo: no error occurrence */
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <main+0x148>)
 80005ea:	f000 fd1f 	bl	800102c <HAL_GPIO_WritePin>
      }
    }
  }

  /*##-11- Unlink the RAM disk I/O driver ####################################*/
  FATFS_UnLinkDriver(SDPath);
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <main+0x130>)
 80005f0:	f005 fec4 	bl	800637c <FATFS_UnLinkDriver>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x128>
 80005f6:	bf00      	nop
 80005f8:	08006414 	.word	0x08006414
 80005fc:	20000710 	.word	0x20000710
 8000600:	0800648c 	.word	0x0800648c
 8000604:	200000ac 	.word	0x200000ac
 8000608:	2000050c 	.word	0x2000050c
 800060c:	08006408 	.word	0x08006408
 8000610:	200002dc 	.word	0x200002dc
 8000614:	40020c00 	.word	0x40020c00

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 feda 	bl	80063e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemClock_Config+0xc8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <SystemClock_Config+0xcc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xcc>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000688:	2310      	movs	r3, #16
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800068c:	23c0      	movs	r3, #192	; 0xc0
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fcdf 	bl	8001060 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f8ac 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ff42 	bl	8001550 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006d2:	f000 f897 	bl	8000804 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <MX_SDIO_SD_Init+0x3c>)
 80006f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
    }*/
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	20000028 	.word	0x20000028
 8000724:	40012c00 	.word	0x40012c00

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a2c      	ldr	r2, [pc, #176]	; (80007f8 <MX_GPIO_Init+0xd0>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <MX_GPIO_Init+0xd0>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a1e      	ldr	r2, [pc, #120]	; (80007f8 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80007b4:	4811      	ldr	r0, [pc, #68]	; (80007fc <MX_GPIO_Init+0xd4>)
 80007b6:	f000 fc39 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_GPIO_Init+0xd8>)
 80007ce:	f000 fa91 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80007d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0xd4>)
 80007ec:	f000 fa82 	bl	8000cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020c00 	.word	0x40020c00
 8000800:	40021000 	.word	0x40021000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a28      	ldr	r2, [pc, #160]	; (8000920 <HAL_SD_MspInit+0xc0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d14a      	bne.n	8000918 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <HAL_SD_MspInit+0xc4>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a26      	ldr	r2, [pc, #152]	; (8000924 <HAL_SD_MspInit+0xc4>)
 800088c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <HAL_SD_MspInit+0xc4>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <HAL_SD_MspInit+0xc4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <HAL_SD_MspInit+0xc4>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <HAL_SD_MspInit+0xc4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_SD_MspInit+0xc4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_SD_MspInit+0xc4>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_SD_MspInit+0xc4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80008d6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008e8:	230c      	movs	r3, #12
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <HAL_SD_MspInit+0xc8>)
 80008f4:	f000 f9fe 	bl	8000cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f8:	2304      	movs	r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000908:	230c      	movs	r3, #12
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_SD_MspInit+0xcc>)
 8000914:	f000 f9ee 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40012c00 	.word	0x40012c00
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020c00 	.word	0x40020c00

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f890 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009c4:	4c0b      	ldr	r4, [pc, #44]	; (80009f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d2:	f7ff ffd7 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d6:	f005 fcdf 	bl	8006398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009da:	f7ff fd77 	bl	80004cc <main>
  bx  lr    
 80009de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ec:	08006550 	.word	0x08006550
  ldr r2, =_sbss
 80009f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f4:	20000748 	.word	0x20000748

080009f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <HAL_Init+0x40>)
 8000a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_Init+0x40>)
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x40>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f931 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff feee 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023c00 	.word	0x40023c00

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f93b 	bl	8000cda <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f000 f911 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	2000070c 	.word	0x2000070c

08000ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000070c 	.word	0x2000070c

08000ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	f7ff ffee 	bl	8000ac8 <HAL_GetTick>
 8000aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af8:	d005      	beq.n	8000b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_Delay+0x44>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b06:	bf00      	nop
 8000b08:	f7ff ffde 	bl	8000ac8 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d8f7      	bhi.n	8000b08 <HAL_Delay+0x28>
  {
  }
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff47 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff5c 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffb0 	bl	8000c48 <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	e16b      	b.n	8000fe8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f040 815a 	bne.w	8000fe2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d005      	beq.n	8000d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d130      	bne.n	8000da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	091b      	lsrs	r3, r3, #4
 8000d92:	f003 0201 	and.w	r2, r3, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d017      	beq.n	8000de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d123      	bne.n	8000e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	69b9      	ldr	r1, [r7, #24]
 8000e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0203 	and.w	r2, r3, #3
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 80b4 	beq.w	8000fe2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b60      	ldr	r3, [pc, #384]	; (8001000 <HAL_GPIO_Init+0x30c>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a5f      	ldr	r2, [pc, #380]	; (8001000 <HAL_GPIO_Init+0x30c>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	; (8001000 <HAL_GPIO_Init+0x30c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e96:	4a5b      	ldr	r2, [pc, #364]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a52      	ldr	r2, [pc, #328]	; (8001008 <HAL_GPIO_Init+0x314>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d02b      	beq.n	8000f1a <HAL_GPIO_Init+0x226>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a51      	ldr	r2, [pc, #324]	; (800100c <HAL_GPIO_Init+0x318>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d025      	beq.n	8000f16 <HAL_GPIO_Init+0x222>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a50      	ldr	r2, [pc, #320]	; (8001010 <HAL_GPIO_Init+0x31c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01f      	beq.n	8000f12 <HAL_GPIO_Init+0x21e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4f      	ldr	r2, [pc, #316]	; (8001014 <HAL_GPIO_Init+0x320>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x21a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4e      	ldr	r2, [pc, #312]	; (8001018 <HAL_GPIO_Init+0x324>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x216>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4d      	ldr	r2, [pc, #308]	; (800101c <HAL_GPIO_Init+0x328>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x212>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4c      	ldr	r2, [pc, #304]	; (8001020 <HAL_GPIO_Init+0x32c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x20e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4b      	ldr	r2, [pc, #300]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x20a>
 8000efa:	2307      	movs	r3, #7
 8000efc:	e00e      	b.n	8000f1c <HAL_GPIO_Init+0x228>
 8000efe:	2308      	movs	r3, #8
 8000f00:	e00c      	b.n	8000f1c <HAL_GPIO_Init+0x228>
 8000f02:	2306      	movs	r3, #6
 8000f04:	e00a      	b.n	8000f1c <HAL_GPIO_Init+0x228>
 8000f06:	2305      	movs	r3, #5
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x228>
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x228>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x228>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x228>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x228>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5e:	4a32      	ldr	r2, [pc, #200]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f64:	4b30      	ldr	r3, [pc, #192]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	f67f ae90 	bls.w	8000d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40013800 	.word	0x40013800
 8001008:	40020000 	.word	0x40020000
 800100c:	40020400 	.word	0x40020400
 8001010:	40020800 	.word	0x40020800
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40021400 	.word	0x40021400
 8001020:	40021800 	.word	0x40021800
 8001024:	40021c00 	.word	0x40021c00
 8001028:	40013c00 	.word	0x40013c00

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001048:	e003      	b.n	8001052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e267      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d075      	beq.n	800116a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b04      	cmp	r3, #4
 8001088:	d00c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	4b85      	ldr	r3, [pc, #532]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001092:	2b08      	cmp	r3, #8
 8001094:	d112      	bne.n	80010bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001096:	4b82      	ldr	r3, [pc, #520]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a2:	d10b      	bne.n	80010bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	4b7e      	ldr	r3, [pc, #504]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d05b      	beq.n	8001168 <HAL_RCC_OscConfig+0x108>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d157      	bne.n	8001168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e242      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c4:	d106      	bne.n	80010d4 <HAL_RCC_OscConfig+0x74>
 80010c6:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a75      	ldr	r2, [pc, #468]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e01d      	b.n	8001110 <HAL_RCC_OscConfig+0xb0>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x98>
 80010de:	4b70      	ldr	r3, [pc, #448]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a6f      	ldr	r2, [pc, #444]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b6d      	ldr	r3, [pc, #436]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6c      	ldr	r2, [pc, #432]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0xb0>
 80010f8:	4b69      	ldr	r3, [pc, #420]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a68      	ldr	r2, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a65      	ldr	r2, [pc, #404]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcd6 	bl	8000ac8 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcd2 	bl	8000ac8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e207      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0xc0>
 800113e:	e014      	b.n	800116a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcc2 	bl	8000ac8 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fcbe 	bl	8000ac8 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1f3      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0xe8>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d063      	beq.n	800123e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001176:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d11c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118e:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x152>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e1c7      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4937      	ldr	r1, [pc, #220]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	e03a      	b.n	800123e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_RCC_OscConfig+0x244>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc77 	bl	8000ac8 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fc73 	bl	8000ac8 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e1a8      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4925      	ldr	r1, [pc, #148]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
 8001210:	e015      	b.n	800123e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_OscConfig+0x244>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001218:	f7ff fc56 	bl	8000ac8 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff fc52 	bl	8000ac8 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e187      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d036      	beq.n	80012b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d016      	beq.n	8001280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_RCC_OscConfig+0x248>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001258:	f7ff fc36 	bl	8000ac8 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fc32 	bl	8000ac8 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e167      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x200>
 800127e:	e01b      	b.n	80012b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_OscConfig+0x248>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fc1f 	bl	8000ac8 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	e00e      	b.n	80012ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128e:	f7ff fc1b 	bl	8000ac8 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d907      	bls.n	80012ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e150      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
 80012a0:	40023800 	.word	0x40023800
 80012a4:	42470000 	.word	0x42470000
 80012a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	4b88      	ldr	r3, [pc, #544]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ea      	bne.n	800128e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8097 	beq.w	80013f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ca:	4b81      	ldr	r3, [pc, #516]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10f      	bne.n	80012f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b7d      	ldr	r3, [pc, #500]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a7c      	ldr	r2, [pc, #496]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b7a      	ldr	r3, [pc, #488]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f2:	2301      	movs	r3, #1
 80012f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f6:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d118      	bne.n	8001334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001302:	4b74      	ldr	r3, [pc, #464]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a73      	ldr	r2, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130e:	f7ff fbdb 	bl	8000ac8 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001316:	f7ff fbd7 	bl	8000ac8 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e10c      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x2ea>
 800133c:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001340:	4a63      	ldr	r2, [pc, #396]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6713      	str	r3, [r2, #112]	; 0x70
 8001348:	e01c      	b.n	8001384 <HAL_RCC_OscConfig+0x324>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x30c>
 8001352:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	4a5e      	ldr	r2, [pc, #376]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
 800135e:	4b5c      	ldr	r3, [pc, #368]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	4a5b      	ldr	r2, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6713      	str	r3, [r2, #112]	; 0x70
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0x324>
 800136c:	4b58      	ldr	r3, [pc, #352]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	4a57      	ldr	r2, [pc, #348]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6713      	str	r3, [r2, #112]	; 0x70
 8001378:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a54      	ldr	r2, [pc, #336]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 0304 	bic.w	r3, r3, #4
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d015      	beq.n	80013b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fb9c 	bl	8000ac8 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff fb98 	bl	8000ac8 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0cb      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0ee      	beq.n	8001394 <HAL_RCC_OscConfig+0x334>
 80013b6:	e014      	b.n	80013e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fb86 	bl	8000ac8 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fb82 	bl	8000ac8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e0b5      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ee      	bne.n	80013c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	4a38      	ldr	r2, [pc, #224]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80a1 	beq.w	8001540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b08      	cmp	r3, #8
 8001408:	d05c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d141      	bne.n	8001496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <HAL_RCC_OscConfig+0x478>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb56 	bl	8000ac8 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fb52 	bl	8000ac8 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e087      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	3b01      	subs	r3, #1
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	491b      	ldr	r1, [pc, #108]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x478>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fb2b 	bl	8000ac8 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fb27 	bl	8000ac8 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e05c      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x416>
 8001494:	e054      	b.n	8001540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_RCC_OscConfig+0x478>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb14 	bl	8000ac8 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fb10 	bl	8000ac8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e045      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x444>
 80014c2:	e03d      	b.n	8001540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d107      	bne.n	80014dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e038      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000
 80014d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_RCC_OscConfig+0x4ec>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d028      	beq.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d121      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d11a      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800150c:	4013      	ands	r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001514:	4293      	cmp	r3, r2
 8001516:	d111      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	3b01      	subs	r3, #1
 8001526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0cc      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d90c      	bls.n	800158c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0b8      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a4:	4b59      	ldr	r3, [pc, #356]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a58      	ldr	r2, [pc, #352]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a52      	ldr	r2, [pc, #328]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	494d      	ldr	r1, [pc, #308]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d044      	beq.n	8001670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d119      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e07f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d003      	beq.n	800160e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	2b03      	cmp	r3, #3
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e067      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4b37      	ldr	r3, [pc, #220]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 0203 	bic.w	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4934      	ldr	r1, [pc, #208]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001640:	f7ff fa42 	bl	8000ac8 <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff fa3e 	bl	8000ac8 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e04f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 020c 	and.w	r2, r3, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	429a      	cmp	r2, r3
 800166e:	d1eb      	bne.n	8001648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d20c      	bcs.n	8001698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e032      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4916      	ldr	r1, [pc, #88]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	490e      	ldr	r1, [pc, #56]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d6:	f000 f821 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	490a      	ldr	r1, [pc, #40]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	5ccb      	ldrb	r3, [r1, r3]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1c8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f9a2 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00
 800170c:	40023800 	.word	0x40023800
 8001710:	0800647c 	.word	0x0800647c
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001720:	b090      	sub	sp, #64	; 0x40
 8001722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
 8001728:	2300      	movs	r3, #0
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d00d      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x40>
 8001740:	2b08      	cmp	r3, #8
 8001742:	f200 80a1 	bhi.w	8001888 <HAL_RCC_GetSysClockFreq+0x16c>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x34>
 800174a:	2b04      	cmp	r3, #4
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x3a>
 800174e:	e09b      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001754:	e09b      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001756:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800175a:	e098      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4b4f      	ldr	r3, [pc, #316]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4b4d      	ldr	r3, [pc, #308]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d028      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	2200      	movs	r2, #0
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	627a      	str	r2, [r7, #36]	; 0x24
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001784:	2100      	movs	r1, #0
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001788:	fb03 f201 	mul.w	r2, r3, r1
 800178c:	2300      	movs	r3, #0
 800178e:	fb00 f303 	mul.w	r3, r0, r3
 8001792:	4413      	add	r3, r2
 8001794:	4a43      	ldr	r2, [pc, #268]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001796:	fba0 1202 	umull	r1, r2, r0, r2
 800179a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800179c:	460a      	mov	r2, r1
 800179e:	62ba      	str	r2, [r7, #40]	; 0x28
 80017a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a2:	4413      	add	r3, r2
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a8:	2200      	movs	r2, #0
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	61fa      	str	r2, [r7, #28]
 80017ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017b6:	f7fe fd07 	bl	80001c8 <__aeabi_uldivmod>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4613      	mov	r3, r2
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c2:	e053      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	099b      	lsrs	r3, r3, #6
 80017ca:	2200      	movs	r2, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	617a      	str	r2, [r7, #20]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017d6:	f04f 0b00 	mov.w	fp, #0
 80017da:	4652      	mov	r2, sl
 80017dc:	465b      	mov	r3, fp
 80017de:	f04f 0000 	mov.w	r0, #0
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	0159      	lsls	r1, r3, #5
 80017e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ec:	0150      	lsls	r0, r2, #5
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	ebb2 080a 	subs.w	r8, r2, sl
 80017f6:	eb63 090b 	sbc.w	r9, r3, fp
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001806:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800180a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800180e:	ebb2 0408 	subs.w	r4, r2, r8
 8001812:	eb63 0509 	sbc.w	r5, r3, r9
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	00eb      	lsls	r3, r5, #3
 8001820:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001824:	00e2      	lsls	r2, r4, #3
 8001826:	4614      	mov	r4, r2
 8001828:	461d      	mov	r5, r3
 800182a:	eb14 030a 	adds.w	r3, r4, sl
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	eb45 030b 	adc.w	r3, r5, fp
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001842:	4629      	mov	r1, r5
 8001844:	028b      	lsls	r3, r1, #10
 8001846:	4621      	mov	r1, r4
 8001848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800184c:	4621      	mov	r1, r4
 800184e:	028a      	lsls	r2, r1, #10
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001856:	2200      	movs	r2, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	60fa      	str	r2, [r7, #12]
 800185c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001860:	f7fe fcb2 	bl	80001c8 <__aeabi_uldivmod>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4613      	mov	r3, r2
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	3301      	adds	r3, #1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800187c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001886:	e002      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800188c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001890:	4618      	mov	r0, r3
 8001892:	3740      	adds	r7, #64	; 0x40
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	00f42400 	.word	0x00f42400
 80018a4:	017d7840 	.word	0x017d7840

080018a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e022      	b.n	8001900 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7fe ffc7 	bl	8000860 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2203      	movs	r2, #3
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f814 	bl	8001908 <HAL_SD_InitCard>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00a      	b.n	8001900 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af04      	add	r7, sp, #16
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001924:	2376      	movs	r3, #118	; 0x76
 8001926:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681d      	ldr	r5, [r3, #0]
 800192c:	466c      	mov	r4, sp
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001940:	4628      	mov	r0, r5
 8001942:	f000 ff39 	bl	80027b8 <SDIO_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800194c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e04f      	b.n	80019f8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_SD_InitCard+0xf8>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 ff71 	bl	800284a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_SD_InitCard+0xf8>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800196e:	2002      	movs	r0, #2
 8001970:	f7ff f8b6 	bl	8000ae0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fe69 	bl	800264c <SD_PowerON>
 800197a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e02e      	b.n	80019f8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fd88 	bl	80024b0 <SD_InitCard>
 80019a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00b      	beq.n	80019c0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e01b      	b.n	80019f8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 ffd0 	bl	800296e <SDMMC_CmdBlockLength>
 80019ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00f      	beq.n	80019f6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_SD_InitCard+0xfc>)
 80019dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001a00:	422580a0 	.word	0x422580a0
 8001a04:	004005ff 	.word	0x004005ff

08001a08 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b092      	sub	sp, #72	; 0x48
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001a16:	f7ff f857 	bl	8000ac8 <HAL_GetTick>
 8001a1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e1bd      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	f040 81b0 	bne.w	8001da8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	441a      	add	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d907      	bls.n	8001a6c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a60:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e1a4      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2203      	movs	r2, #3
 8001a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d002      	beq.n	8001a8a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001a96:	2390      	movs	r3, #144	; 0x90
 8001a98:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f107 0214 	add.w	r2, r7, #20
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 ff30 	bl	8002916 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d90a      	bls.n	8001ad2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 ff94 	bl	80029f6 <SDMMC_CmdReadMultiBlock>
 8001ace:	6478      	str	r0, [r7, #68]	; 0x44
 8001ad0:	e009      	b.n	8001ae6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 ff67 	bl	80029b2 <SDMMC_CmdReadSingleBlock>
 8001ae4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d012      	beq.n	8001b12 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a7a      	ldr	r2, [pc, #488]	; (8001cdc <HAL_SD_ReadBlocks+0x2d4>)
 8001af2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e151      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001b16:	e061      	b.n	8001bdc <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03c      	beq.n	8001ba0 <HAL_SD_ReadBlocks+0x198>
 8001b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d039      	beq.n	8001ba0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b30:	e033      	b.n	8001b9a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fe69 	bl	800280e <SDIO_ReadFIFO>
 8001b3c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	3301      	adds	r3, #1
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5e:	3301      	adds	r3, #1
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b64:	3b01      	subs	r3, #1
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	0c1b      	lsrs	r3, r3, #16
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b74:	3301      	adds	r3, #1
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b80:	0e1b      	lsrs	r3, r3, #24
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b90:	3b01      	subs	r3, #1
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b96:	3301      	adds	r3, #1
 8001b98:	643b      	str	r3, [r7, #64]	; 0x40
 8001b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d9c8      	bls.n	8001b32 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001ba0:	f7fe ff92 	bl	8000ac8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d902      	bls.n	8001bb6 <HAL_SD_ReadBlocks+0x1ae>
 8001bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d112      	bne.n	8001bdc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a48      	ldr	r2, [pc, #288]	; (8001cdc <HAL_SD_ReadBlocks+0x2d4>)
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0ec      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be2:	f240 332a 	movw	r3, #810	; 0x32a
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d095      	beq.n	8001b18 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d022      	beq.n	8001c40 <HAL_SD_ReadBlocks+0x238>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d91f      	bls.n	8001c40 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d01b      	beq.n	8001c40 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 ff59 	bl	8002ac4 <SDMMC_CmdStopTransfer>
 8001c12:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d012      	beq.n	8001c40 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <HAL_SD_ReadBlocks+0x2d4>)
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0ba      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d012      	beq.n	8001c74 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a22      	ldr	r2, [pc, #136]	; (8001cdc <HAL_SD_ReadBlocks+0x2d4>)
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	f043 0208 	orr.w	r2, r3, #8
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0a0      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d012      	beq.n	8001ca8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <HAL_SD_ReadBlocks+0x2d4>)
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e086      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_SD_ReadBlocks+0x2d4>)
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	f043 0220 	orr.w	r2, r3, #32
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e06c      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
 8001cdc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fd92 	bl	800280e <SDIO_ReadFIFO>
 8001cea:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d12:	3b01      	subs	r3, #1
 8001d14:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d22:	3301      	adds	r3, #1
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	0e1b      	lsrs	r3, r3, #24
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d38:	3301      	adds	r3, #1
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001d42:	f7fe fec1 	bl	8000ac8 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d902      	bls.n	8001d58 <HAL_SD_ReadBlocks+0x350>
 8001d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d112      	bne.n	8001d7e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <HAL_SD_ReadBlocks+0x3b8>)
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e01b      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_SD_ReadBlocks+0x38a>
 8001d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1a6      	bne.n	8001ce0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f240 523a 	movw	r2, #1338	; 0x53a
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e006      	b.n	8001db6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
  }
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3748      	adds	r7, #72	; 0x48
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	004005ff 	.word	0x004005ff

08001dc4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b092      	sub	sp, #72	; 0x48
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001dd2:	f7fe fe79 	bl	8000ac8 <HAL_GetTick>
 8001dd6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d107      	bne.n	8001df6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e166      	b.n	80020c4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	f040 8159 	bne.w	80020b6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	441a      	add	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d907      	bls.n	8001e28 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e14d      	b.n	80020c4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2200      	movs	r2, #0
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d002      	beq.n	8001e46 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e42:	025b      	lsls	r3, r3, #9
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	029b      	lsls	r3, r3, #10
 8001e50:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001e52:	2390      	movs	r3, #144	; 0x90
 8001e54:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f107 0218 	add.w	r2, r7, #24
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fd52 	bl	8002916 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d90a      	bls.n	8001e8e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fdfa 	bl	8002a7e <SDMMC_CmdWriteMultiBlock>
 8001e8a:	6478      	str	r0, [r7, #68]	; 0x44
 8001e8c:	e009      	b.n	8001ea2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2210      	movs	r2, #16
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fdcd 	bl	8002a3a <SDMMC_CmdWriteSingleBlock>
 8001ea0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d012      	beq.n	8001ece <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a87      	ldr	r2, [pc, #540]	; (80020cc <HAL_SD_WriteBlocks+0x308>)
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0fa      	b.n	80020c4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ed2:	e065      	b.n	8001fa0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d040      	beq.n	8001f64 <HAL_SD_WriteBlocks+0x1a0>
 8001ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03d      	beq.n	8001f64 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	643b      	str	r3, [r7, #64]	; 0x40
 8001eec:	e037      	b.n	8001f5e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8001eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efc:	3b01      	subs	r3, #1
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8001f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	021a      	lsls	r2, r3, #8
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0e:	3301      	adds	r3, #1
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f14:	3b01      	subs	r3, #1
 8001f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8001f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f26:	3301      	adds	r3, #1
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	061a      	lsls	r2, r3, #24
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	3301      	adds	r3, #1
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f44:	3b01      	subs	r3, #1
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f107 0214 	add.w	r2, r7, #20
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fc68 	bl	8002828 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f60:	2b07      	cmp	r3, #7
 8001f62:	d9c4      	bls.n	8001eee <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001f64:	f7fe fdb0 	bl	8000ac8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d902      	bls.n	8001f7a <HAL_SD_WriteBlocks+0x1b6>
 8001f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d112      	bne.n	8001fa0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a53      	ldr	r2, [pc, #332]	; (80020cc <HAL_SD_WriteBlocks+0x308>)
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e091      	b.n	80020c4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa6:	f240 331a 	movw	r3, #794	; 0x31a
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d091      	beq.n	8001ed4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d022      	beq.n	8002004 <HAL_SD_WriteBlocks+0x240>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d91f      	bls.n	8002004 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d01b      	beq.n	8002004 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fd77 	bl	8002ac4 <SDMMC_CmdStopTransfer>
 8001fd6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d012      	beq.n	8002004 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a3a      	ldr	r2, [pc, #232]	; (80020cc <HAL_SD_WriteBlocks+0x308>)
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fec:	431a      	orrs	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e05f      	b.n	80020c4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d012      	beq.n	8002038 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a2d      	ldr	r2, [pc, #180]	; (80020cc <HAL_SD_WriteBlocks+0x308>)
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	f043 0208 	orr.w	r2, r3, #8
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e045      	b.n	80020c4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d012      	beq.n	800206c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a20      	ldr	r2, [pc, #128]	; (80020cc <HAL_SD_WriteBlocks+0x308>)
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	f043 0202 	orr.w	r2, r3, #2
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e02b      	b.n	80020c4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d012      	beq.n	80020a0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a13      	ldr	r2, [pc, #76]	; (80020cc <HAL_SD_WriteBlocks+0x308>)
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	f043 0210 	orr.w	r2, r3, #16
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e011      	b.n	80020c4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e006      	b.n	80020c4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3748      	adds	r7, #72	; 0x48
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	004005ff 	.word	0x004005ff

080020d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020de:	0f9b      	lsrs	r3, r3, #30
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ea:	0e9b      	lsrs	r3, r3, #26
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020fc:	0e1b      	lsrs	r3, r3, #24
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	b2da      	uxtb	r2, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	b2da      	uxtb	r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	b2da      	uxtb	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002126:	b2da      	uxtb	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002130:	0d1b      	lsrs	r3, r3, #20
 8002132:	b29a      	uxth	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	b2da      	uxtb	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800214e:	0bdb      	lsrs	r3, r3, #15
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002160:	0b9b      	lsrs	r3, r3, #14
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	b2da      	uxtb	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002172:	0b5b      	lsrs	r3, r3, #13
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	b2da      	uxtb	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002184:	0b1b      	lsrs	r3, r3, #12
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2200      	movs	r2, #0
 8002196:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	2b00      	cmp	r3, #0
 800219e:	d163      	bne.n	8002268 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a4:	009a      	lsls	r2, r3, #2
 80021a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021aa:	4013      	ands	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80021b0:	0f92      	lsrs	r2, r2, #30
 80021b2:	431a      	orrs	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021bc:	0edb      	lsrs	r3, r3, #27
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ce:	0e1b      	lsrs	r3, r3, #24
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021e0:	0d5b      	lsrs	r3, r3, #21
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f2:	0c9b      	lsrs	r3, r3, #18
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002204:	0bdb      	lsrs	r3, r3, #15
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	b2da      	uxtb	r2, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	3302      	adds	r3, #2
 8002228:	2201      	movs	r2, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002232:	fb03 f202 	mul.w	r2, r3, r2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	7a1b      	ldrb	r3, [r3, #8]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	2201      	movs	r2, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002254:	0a52      	lsrs	r2, r2, #9
 8002256:	fb03 f202 	mul.w	r2, r3, r2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002264:	661a      	str	r2, [r3, #96]	; 0x60
 8002266:	e031      	b.n	80022cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	2b01      	cmp	r3, #1
 800226e:	d11d      	bne.n	80022ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800227e:	0c1b      	lsrs	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	3301      	adds	r3, #1
 800228c:	029a      	lsls	r2, r3, #10
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	661a      	str	r2, [r3, #96]	; 0x60
 80022aa:	e00f      	b.n	80022cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_SD_GetCardCSD+0x344>)
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e09d      	b.n	8002408 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d0:	0b9b      	lsrs	r3, r3, #14
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e2:	09db      	lsrs	r3, r3, #7
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	0fdb      	lsrs	r3, r3, #31
 8002306:	b2da      	uxtb	r2, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	0f5b      	lsrs	r3, r3, #29
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	b2da      	uxtb	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	0e9b      	lsrs	r3, r3, #26
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	b2da      	uxtb	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	0d9b      	lsrs	r3, r3, #22
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	b2da      	uxtb	r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	0d5b      	lsrs	r3, r3, #21
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	b2da      	uxtb	r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	0bdb      	lsrs	r3, r3, #15
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	b2da      	uxtb	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	0b9b      	lsrs	r3, r3, #14
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	0b5b      	lsrs	r3, r3, #13
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	0b1b      	lsrs	r3, r3, #12
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	0a9b      	lsrs	r3, r3, #10
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	004005ff 	.word	0x004005ff

08002418 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f970 	bl	8002768 <SD_SendStatus>
 8002488:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	0a5b      	lsrs	r3, r3, #9
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80024a6:	693b      	ldr	r3, [r7, #16]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b094      	sub	sp, #80	; 0x50
 80024b4:	af04      	add	r7, sp, #16
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80024b8:	2301      	movs	r3, #1
 80024ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f9d0 	bl	8002866 <SDIO_GetPowerState>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80024cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024d0:	e0b8      	b.n	8002644 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d02f      	beq.n	800253a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fbb7 	bl	8002c52 <SDMMC_CmdSendCID>
 80024e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80024e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80024ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ee:	e0a9      	b.n	8002644 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f9fa 	bl	80028f0 <SDIO_GetResponse>
 80024fc:	4602      	mov	r2, r0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2104      	movs	r1, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f9f1 	bl	80028f0 <SDIO_GetResponse>
 800250e:	4602      	mov	r2, r0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2108      	movs	r1, #8
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f9e8 	bl	80028f0 <SDIO_GetResponse>
 8002520:	4602      	mov	r2, r0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	210c      	movs	r1, #12
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f9df 	bl	80028f0 <SDIO_GetResponse>
 8002532:	4602      	mov	r2, r0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	2b03      	cmp	r3, #3
 8002540:	d00d      	beq.n	800255e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f107 020e 	add.w	r2, r7, #14
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fbbd 	bl	8002ccc <SDMMC_CmdSetRelAdd>
 8002552:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <SD_InitCard+0xae>
    {
      return errorstate;
 800255a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255c:	e072      	b.n	8002644 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	2b03      	cmp	r3, #3
 8002564:	d036      	beq.n	80025d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f000 fb87 	bl	8002c8e <SDMMC_CmdSendCSD>
 8002580:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <SD_InitCard+0xdc>
    {
      return errorstate;
 8002588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258a:	e05b      	b.n	8002644 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f9ac 	bl	80028f0 <SDIO_GetResponse>
 8002598:	4602      	mov	r2, r0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2104      	movs	r1, #4
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f9a3 	bl	80028f0 <SDIO_GetResponse>
 80025aa:	4602      	mov	r2, r0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2108      	movs	r1, #8
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f99a 	bl	80028f0 <SDIO_GetResponse>
 80025bc:	4602      	mov	r2, r0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	210c      	movs	r1, #12
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f991 	bl	80028f0 <SDIO_GetResponse>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2104      	movs	r1, #4
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f988 	bl	80028f0 <SDIO_GetResponse>
 80025e0:	4603      	mov	r3, r0
 80025e2:	0d1a      	lsrs	r2, r3, #20
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fd6e 	bl	80020d0 <HAL_SD_GetCardCSD>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025fe:	e021      	b.n	8002644 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002608:	041b      	lsls	r3, r3, #16
 800260a:	2200      	movs	r2, #0
 800260c:	461c      	mov	r4, r3
 800260e:	4615      	mov	r5, r2
 8002610:	4622      	mov	r2, r4
 8002612:	462b      	mov	r3, r5
 8002614:	4608      	mov	r0, r1
 8002616:	f000 fa77 	bl	8002b08 <SDMMC_CmdSelDesel>
 800261a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800261c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <SD_InitCard+0x176>
  {
    return errorstate;
 8002622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002624:	e00e      	b.n	8002644 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681d      	ldr	r5, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	466c      	mov	r4, sp
 800262e:	f103 0210 	add.w	r2, r3, #16
 8002632:	ca07      	ldmia	r2, {r0, r1, r2}
 8002634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002638:	3304      	adds	r3, #4
 800263a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263c:	4628      	mov	r0, r5
 800263e:	f000 f8bb 	bl	80027b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3740      	adds	r7, #64	; 0x40
 8002648:	46bd      	mov	sp, r7
 800264a:	bdb0      	pop	{r4, r5, r7, pc}

0800264c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fa72 	bl	8002b4e <SDMMC_CmdGoIdleState>
 800266a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	e072      	b.n	800275c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fa85 	bl	8002b8a <SDMMC_CmdOperCond>
 8002680:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fa5b 	bl	8002b4e <SDMMC_CmdGoIdleState>
 8002698:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	e05b      	b.n	800275c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d137      	bne.n	8002722 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fa85 	bl	8002bc8 <SDMMC_CmdAppCommand>
 80026be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02d      	beq.n	8002722 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026ca:	e047      	b.n	800275c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fa78 	bl	8002bc8 <SDMMC_CmdAppCommand>
 80026d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	e03b      	b.n	800275c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	491e      	ldr	r1, [pc, #120]	; (8002764 <SD_PowerON+0x118>)
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fa8e 	bl	8002c0c <SDMMC_CmdAppOperCommand>
 80026f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026fc:	e02e      	b.n	800275c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f8f3 	bl	80028f0 <SDIO_GetResponse>
 800270a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	0fdb      	lsrs	r3, r3, #31
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <SD_PowerON+0xcc>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <SD_PowerON+0xce>
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]

    count++;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3301      	adds	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002728:	4293      	cmp	r3, r2
 800272a:	d802      	bhi.n	8002732 <SD_PowerON+0xe6>
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0cc      	beq.n	80026cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002738:	4293      	cmp	r3, r2
 800273a:	d902      	bls.n	8002742 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800273c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002740:	e00c      	b.n	800275c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
 8002752:	e002      	b.n	800275a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	c1100000 	.word	0xc1100000

08002768 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002778:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800277c:	e018      	b.n	80027b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002786:	041b      	lsls	r3, r3, #16
 8002788:	4619      	mov	r1, r3
 800278a:	4610      	mov	r0, r2
 800278c:	f000 fabf 	bl	8002d0e <SDMMC_CmdSendStatus>
 8002790:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <SD_SendStatus+0x34>
  {
    return errorstate;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	e009      	b.n	80027b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f8a4 	bl	80028f0 <SDIO_GetResponse>
 80027a8:	4602      	mov	r2, r0
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80027b8:	b084      	sub	sp, #16
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	f107 001c 	add.w	r0, r7, #28
 80027c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80027ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80027d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80027d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80027d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80027da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80027de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80027e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80027f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	b004      	add	sp, #16
 800280c:	4770      	bx	lr

0800280e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2203      	movs	r2, #3
 8002856:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0303 	and.w	r3, r3, #3
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80028a0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80028a6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80028ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80028bc:	f023 030f 	bic.w	r3, r3, #15
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	b2db      	uxtb	r3, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3314      	adds	r3, #20
 80028fe:	461a      	mov	r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
}  
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800293c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002942:	431a      	orrs	r2, r3
                       Data->DPSM);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8002948:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002960:	2300      	movs	r3, #0

}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b088      	sub	sp, #32
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800297c:	2310      	movs	r3, #16
 800297e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002980:	2340      	movs	r3, #64	; 0x40
 8002982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff74 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	2110      	movs	r1, #16
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f9d7 	bl	8002d54 <SDMMC_GetCmdResp1>
 80029a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029a8:	69fb      	ldr	r3, [r7, #28]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b088      	sub	sp, #32
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80029c0:	2311      	movs	r3, #17
 80029c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029c4:	2340      	movs	r3, #64	; 0x40
 80029c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029d2:	f107 0308 	add.w	r3, r7, #8
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff52 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	2111      	movs	r1, #17
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f9b5 	bl	8002d54 <SDMMC_GetCmdResp1>
 80029ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029ec:	69fb      	ldr	r3, [r7, #28]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b088      	sub	sp, #32
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002a04:	2312      	movs	r3, #18
 8002a06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a08:	2340      	movs	r3, #64	; 0x40
 8002a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a16:	f107 0308 	add.w	r3, r7, #8
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff30 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	2112      	movs	r1, #18
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f993 	bl	8002d54 <SDMMC_GetCmdResp1>
 8002a2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a30:	69fb      	ldr	r3, [r7, #28]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b088      	sub	sp, #32
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002a48:	2318      	movs	r3, #24
 8002a4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a4c:	2340      	movs	r3, #64	; 0x40
 8002a4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a5a:	f107 0308 	add.w	r3, r7, #8
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff0e 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	2118      	movs	r1, #24
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f971 	bl	8002d54 <SDMMC_GetCmdResp1>
 8002a72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a74:	69fb      	ldr	r3, [r7, #28]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b088      	sub	sp, #32
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002a8c:	2319      	movs	r3, #25
 8002a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a90:	2340      	movs	r3, #64	; 0x40
 8002a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a9e:	f107 0308 	add.w	r3, r7, #8
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff feec 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	2119      	movs	r1, #25
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f94f 	bl	8002d54 <SDMMC_GetCmdResp1>
 8002ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002ad0:	230c      	movs	r3, #12
 8002ad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ad4:	2340      	movs	r3, #64	; 0x40
 8002ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff feca 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002aee:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <SDMMC_CmdStopTransfer+0x40>)
 8002af0:	210c      	movs	r1, #12
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f92e 	bl	8002d54 <SDMMC_GetCmdResp1>
 8002af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002afa:	69fb      	ldr	r3, [r7, #28]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	05f5e100 	.word	0x05f5e100

08002b08 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002b18:	2307      	movs	r3, #7
 8002b1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b1c:	2340      	movs	r3, #64	; 0x40
 8002b1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b28:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4619      	mov	r1, r3
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fea6 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	2107      	movs	r1, #7
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f909 	bl	8002d54 <SDMMC_GetCmdResp1>
 8002b42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b088      	sub	sp, #32
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fe85 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fb23 	bl	80031c4 <SDMMC_GetCmdError>
 8002b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b80:	69fb      	ldr	r3, [r7, #28]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b088      	sub	sp, #32
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002b92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002b98:	2308      	movs	r3, #8
 8002b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b9c:	2340      	movs	r3, #64	; 0x40
 8002b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002baa:	f107 0308 	add.w	r3, r7, #8
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff fe66 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fab6 	bl	8003128 <SDMMC_GetCmdResp7>
 8002bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002bd6:	2337      	movs	r3, #55	; 0x37
 8002bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002bda:	2340      	movs	r3, #64	; 0x40
 8002bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002be8:	f107 0308 	add.w	r3, r7, #8
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff fe47 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf8:	2137      	movs	r1, #55	; 0x37
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8aa 	bl	8002d54 <SDMMC_GetCmdResp1>
 8002c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c02:	69fb      	ldr	r3, [r7, #28]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002c22:	2329      	movs	r3, #41	; 0x29
 8002c24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c26:	2340      	movs	r3, #64	; 0x40
 8002c28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c34:	f107 0308 	add.w	r3, r7, #8
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fe21 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f9bd 	bl	8002fc0 <SDMMC_GetCmdResp3>
 8002c46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c48:	69fb      	ldr	r3, [r7, #28]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b088      	sub	sp, #32
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002c62:	23c0      	movs	r3, #192	; 0xc0
 8002c64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c70:	f107 0308 	add.w	r3, r7, #8
 8002c74:	4619      	mov	r1, r3
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff fe03 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f957 	bl	8002f30 <SDMMC_GetCmdResp2>
 8002c82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c84:	69fb      	ldr	r3, [r7, #28]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b088      	sub	sp, #32
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002c9c:	2309      	movs	r3, #9
 8002c9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002ca0:	23c0      	movs	r3, #192	; 0xc0
 8002ca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002cae:	f107 0308 	add.w	r3, r7, #8
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fde4 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f938 	bl	8002f30 <SDMMC_GetCmdResp2>
 8002cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fdc5 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	2103      	movs	r1, #3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f99d 	bl	800303c <SDMMC_GetCmdResp6>
 8002d02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002d04:	69fb      	ldr	r3, [r7, #28]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b088      	sub	sp, #32
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002d1c:	230d      	movs	r3, #13
 8002d1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d20:	2340      	movs	r3, #64	; 0x40
 8002d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff fda4 	bl	8002882 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	210d      	movs	r1, #13
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f807 	bl	8002d54 <SDMMC_GetCmdResp1>
 8002d46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002d48:	69fb      	ldr	r3, [r7, #28]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d62:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <SDMMC_GetCmdResp1+0x1d0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a70      	ldr	r2, [pc, #448]	; (8002f28 <SDMMC_GetCmdResp1+0x1d4>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	0a5a      	lsrs	r2, r3, #9
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	1e5a      	subs	r2, r3, #1
 8002d7a:	61fa      	str	r2, [r7, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002d80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d84:	e0c9      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ef      	beq.n	8002d76 <SDMMC_GetCmdResp1+0x22>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ea      	bne.n	8002d76 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2204      	movs	r2, #4
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002db2:	2304      	movs	r3, #4
 8002db4:	e0b1      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0a6      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	22c5      	movs	r2, #197	; 0xc5
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f7ff fd7f 	bl	80028d6 <SDIO_GetCommandResponse>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d001      	beq.n	8002de6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e099      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002de6:	2100      	movs	r1, #0
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fd81 	bl	80028f0 <SDIO_GetResponse>
 8002dee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4b4e      	ldr	r3, [pc, #312]	; (8002f2c <SDMMC_GetCmdResp1+0x1d8>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e08d      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da02      	bge.n	8002e0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e08:	e087      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002e14:	2340      	movs	r3, #64	; 0x40
 8002e16:	e080      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	e079      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e34:	e071      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e44:	e069      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e54:	e061      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e64:	e059      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e74:	e051      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e84:	e049      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002e90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e94:	e041      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8002ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea4:	e039      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb4:	e031      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002ec0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ec4:	e029      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002ed0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ed4:	e021      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002ee0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ee4:	e019      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002ef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ef4:	e011      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8002f00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f04:	e009      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002f10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002f14:	e001      	b.n	8002f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000000 	.word	0x20000000
 8002f28:	10624dd3 	.word	0x10624dd3
 8002f2c:	fdffe008 	.word	0xfdffe008

08002f30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002f38:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <SDMMC_GetCmdResp2+0x88>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <SDMMC_GetCmdResp2+0x8c>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0a5b      	lsrs	r3, r3, #9
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	60fa      	str	r2, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002f58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f5c:	e026      	b.n	8002fac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ef      	beq.n	8002f4e <SDMMC_GetCmdResp2+0x1e>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ea      	bne.n	8002f4e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2204      	movs	r2, #4
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e00e      	b.n	8002fac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e003      	b.n	8002fac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	22c5      	movs	r2, #197	; 0xc5
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	10624dd3 	.word	0x10624dd3

08002fc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <SDMMC_GetCmdResp3+0x74>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <SDMMC_GetCmdResp3+0x78>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0a5b      	lsrs	r3, r3, #9
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	60fa      	str	r2, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002fe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002fec:	e01b      	b.n	8003026 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ef      	beq.n	8002fde <SDMMC_GetCmdResp3+0x1e>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ea      	bne.n	8002fde <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2204      	movs	r2, #4
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800301a:	2304      	movs	r3, #4
 800301c:	e003      	b.n	8003026 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	22c5      	movs	r2, #197	; 0xc5
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000000 	.word	0x20000000
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	460b      	mov	r3, r1
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800304a:	4b35      	ldr	r3, [pc, #212]	; (8003120 <SDMMC_GetCmdResp6+0xe4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a35      	ldr	r2, [pc, #212]	; (8003124 <SDMMC_GetCmdResp6+0xe8>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	0a5b      	lsrs	r3, r3, #9
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	1e5a      	subs	r2, r3, #1
 8003064:	61fa      	str	r2, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800306a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800306e:	e052      	b.n	8003116 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ef      	beq.n	8003060 <SDMMC_GetCmdResp6+0x24>
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ea      	bne.n	8003060 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2204      	movs	r2, #4
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800309c:	2304      	movs	r3, #4
 800309e:	e03a      	b.n	8003116 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e02f      	b.n	8003116 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff fc0d 	bl	80028d6 <SDIO_GetCommandResponse>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	7afb      	ldrb	r3, [r7, #11]
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d001      	beq.n	80030ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e025      	b.n	8003116 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	22c5      	movs	r2, #197	; 0xc5
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80030d0:	2100      	movs	r1, #0
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff fc0c 	bl	80028f0 <SDIO_GetResponse>
 80030d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	0c1b      	lsrs	r3, r3, #16
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e011      	b.n	8003116 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80030fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003100:	e009      	b.n	8003116 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800310c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003110:	e001      	b.n	8003116 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000000 	.word	0x20000000
 8003124:	10624dd3 	.word	0x10624dd3

08003128 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <SDMMC_GetCmdResp7+0x94>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <SDMMC_GetCmdResp7+0x98>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0a5b      	lsrs	r3, r3, #9
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	60fa      	str	r2, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003154:	e02c      	b.n	80031b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ef      	beq.n	8003146 <SDMMC_GetCmdResp7+0x1e>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ea      	bne.n	8003146 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2204      	movs	r2, #4
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003182:	2304      	movs	r3, #4
 8003184:	e014      	b.n	80031b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003198:	2301      	movs	r3, #1
 800319a:	e009      	b.n	80031b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2240      	movs	r2, #64	; 0x40
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80031ae:	2300      	movs	r3, #0
  
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	20000000 	.word	0x20000000
 80031c0:	10624dd3 	.word	0x10624dd3

080031c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <SDMMC_GetCmdError+0x50>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a11      	ldr	r2, [pc, #68]	; (8003218 <SDMMC_GetCmdError+0x54>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	0a5b      	lsrs	r3, r3, #9
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	60fa      	str	r2, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80031ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031f0:	e009      	b.n	8003206 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f1      	beq.n	80031e2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	22c5      	movs	r2, #197	; 0xc5
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000000 	.word	0x20000000
 8003218:	10624dd3 	.word	0x10624dd3

0800321c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003220:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	68f9      	ldr	r1, [r7, #12]
 8003248:	4806      	ldr	r0, [pc, #24]	; (8003264 <BSP_SD_ReadBlocks+0x38>)
 800324a:	f7fe fbdd 	bl	8001a08 <HAL_SD_ReadBlocks>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000028 	.word	0x20000028

08003268 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]
  uint32_t state = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
  do
  {
    state = HAL_SD_GetCardState(&hsd);
 800327e:	480f      	ldr	r0, [pc, #60]	; (80032bc <BSP_SD_WriteBlocks+0x54>)
 8003280:	f7ff f8f6 	bl	8002470 <HAL_SD_GetCardState>
 8003284:	6138      	str	r0, [r7, #16]
  }
  while (state == HAL_SD_CARD_RECEIVING || state == HAL_SD_CARD_SENDING || state == HAL_SD_CARD_PROGRAMMING);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b06      	cmp	r3, #6
 800328a:	d0f8      	beq.n	800327e <BSP_SD_WriteBlocks+0x16>
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b05      	cmp	r3, #5
 8003290:	d0f5      	beq.n	800327e <BSP_SD_WriteBlocks+0x16>
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b07      	cmp	r3, #7
 8003296:	d0f2      	beq.n	800327e <BSP_SD_WriteBlocks+0x16>
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	68f9      	ldr	r1, [r7, #12]
 80032a2:	4806      	ldr	r0, [pc, #24]	; (80032bc <BSP_SD_WriteBlocks+0x54>)
 80032a4:	f7fe fd8e 	bl	8001dc4 <HAL_SD_WriteBlocks>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <BSP_SD_WriteBlocks+0x4a>
  {
    sd_state = MSD_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000028 	.word	0x20000028

080032c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80032c4:	4805      	ldr	r0, [pc, #20]	; (80032dc <BSP_SD_GetCardState+0x1c>)
 80032c6:	f7ff f8d3 	bl	8002470 <HAL_SD_GetCardState>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000028 	.word	0x20000028

080032e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4803      	ldr	r0, [pc, #12]	; (80032f8 <BSP_SD_GetCardInfo+0x18>)
 80032ec:	f7ff f894 	bl	8002418 <HAL_SD_GetCardInfo>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000028 	.word	0x20000028

080032fc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <SD_CheckStatus+0x34>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)
  if(BSP_SD_GetCardState() == MSD_OK)
#endif
  {
    Stat &= ~STA_NOINIT;
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <SD_CheckStatus+0x34>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	b2da      	uxtb	r2, r3
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <SD_CheckStatus+0x34>)
 800331a:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <SD_CheckStatus+0x34>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b2db      	uxtb	r3, r3
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000009 	.word	0x20000009

08003334 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <SD_initialize+0x34>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  HAL_SD_Init(&hsd);
 8003344:	4809      	ldr	r0, [pc, #36]	; (800336c <SD_initialize+0x38>)
 8003346:	f7fe faaf 	bl	80018a8 <HAL_SD_Init>
  Stat = SD_CheckStatus(lun);
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ffd5 	bl	80032fc <SD_CheckStatus>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <SD_initialize+0x34>)
 8003358:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 800335a:	4b03      	ldr	r3, [pc, #12]	; (8003368 <SD_initialize+0x34>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b2db      	uxtb	r3, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000009 	.word	0x20000009
 800336c:	20000028 	.word	0x20000028

08003370 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ffbd 	bl	80032fc <SD_CheckStatus>
 8003382:	4603      	mov	r3, r0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4603      	mov	r3, r0
 800339a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	68b8      	ldr	r0, [r7, #8]
 80033aa:	f7ff ff3f 	bl	800322c <BSP_SD_ReadBlocks>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80033b4:	bf00      	nop
 80033b6:	f7ff ff83 	bl	80032c0 <BSP_SD_GetCardState>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1fa      	bne.n	80033b6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	4603      	mov	r3, r0
 80033dc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	68b8      	ldr	r0, [r7, #8]
 80033ec:	f7ff ff3c 	bl	8003268 <BSP_SD_WriteBlocks>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d107      	bne.n	8003406 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80033f6:	bf00      	nop
 80033f8:	f7ff ff62 	bl	80032c0 <BSP_SD_GetCardState>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1fa      	bne.n	80033f8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08c      	sub	sp, #48	; 0x30
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	603a      	str	r2, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
 800341c:	460b      	mov	r3, r1
 800341e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003426:	4b25      	ldr	r3, [pc, #148]	; (80034bc <SD_ioctl+0xac>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <SD_ioctl+0x28>
 8003434:	2303      	movs	r3, #3
 8003436:	e03c      	b.n	80034b2 <SD_ioctl+0xa2>

  switch (cmd)
 8003438:	79bb      	ldrb	r3, [r7, #6]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d834      	bhi.n	80034a8 <SD_ioctl+0x98>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <SD_ioctl+0x34>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003455 	.word	0x08003455
 8003448:	0800345d 	.word	0x0800345d
 800344c:	08003475 	.word	0x08003475
 8003450:	0800348f 	.word	0x0800348f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800345a:	e028      	b.n	80034ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff3d 	bl	80032e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003472:	e01c      	b.n	80034ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff31 	bl	80032e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	b29a      	uxth	r2, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800348c:	e00f      	b.n	80034ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ff24 	bl	80032e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	0a5a      	lsrs	r2, r3, #9
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034a6:	e002      	b.n	80034ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80034a8:	2304      	movs	r3, #4
 80034aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80034ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3730      	adds	r7, #48	; 0x30
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000009 	.word	0x20000009

080034c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <disk_status+0x30>)
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	79fa      	ldrb	r2, [r7, #7]
 80034d8:	4905      	ldr	r1, [pc, #20]	; (80034f0 <disk_status+0x30>)
 80034da:	440a      	add	r2, r1
 80034dc:	7a12      	ldrb	r2, [r2, #8]
 80034de:	4610      	mov	r0, r2
 80034e0:	4798      	blx	r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	2000073c 	.word	0x2000073c

080034f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	4a0d      	ldr	r2, [pc, #52]	; (800353c <disk_initialize+0x48>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d111      	bne.n	8003530 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	4a0b      	ldr	r2, [pc, #44]	; (800353c <disk_initialize+0x48>)
 8003510:	2101      	movs	r1, #1
 8003512:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <disk_initialize+0x48>)
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	79fa      	ldrb	r2, [r7, #7]
 8003522:	4906      	ldr	r1, [pc, #24]	; (800353c <disk_initialize+0x48>)
 8003524:	440a      	add	r2, r1
 8003526:	7a12      	ldrb	r2, [r2, #8]
 8003528:	4610      	mov	r0, r2
 800352a:	4798      	blx	r3
 800352c:	4603      	mov	r3, r0
 800352e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	2000073c 	.word	0x2000073c

08003540 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4603      	mov	r3, r0
 800354e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <disk_read+0x3c>)
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	689c      	ldr	r4, [r3, #8]
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <disk_read+0x3c>)
 8003560:	4413      	add	r3, r2
 8003562:	7a18      	ldrb	r0, [r3, #8]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	47a0      	blx	r4
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
}
 8003572:	4618      	mov	r0, r3
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	bd90      	pop	{r4, r7, pc}
 800357a:	bf00      	nop
 800357c:	2000073c 	.word	0x2000073c

08003580 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4603      	mov	r3, r0
 800358e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <disk_write+0x3c>)
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	68dc      	ldr	r4, [r3, #12]
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	4a07      	ldr	r2, [pc, #28]	; (80035bc <disk_write+0x3c>)
 80035a0:	4413      	add	r3, r2
 80035a2:	7a18      	ldrb	r0, [r3, #8]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	47a0      	blx	r4
 80035ac:	4603      	mov	r3, r0
 80035ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}
 80035ba:	bf00      	nop
 80035bc:	2000073c 	.word	0x2000073c

080035c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	603a      	str	r2, [r7, #0]
 80035ca:	71fb      	strb	r3, [r7, #7]
 80035cc:	460b      	mov	r3, r1
 80035ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <disk_ioctl+0x38>)
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	79fa      	ldrb	r2, [r7, #7]
 80035de:	4906      	ldr	r1, [pc, #24]	; (80035f8 <disk_ioctl+0x38>)
 80035e0:	440a      	add	r2, r1
 80035e2:	7a10      	ldrb	r0, [r2, #8]
 80035e4:	79b9      	ldrb	r1, [r7, #6]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	4798      	blx	r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	2000073c 	.word	0x2000073c

080035fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3301      	adds	r3, #1
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800360c:	89fb      	ldrh	r3, [r7, #14]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	b21a      	sxth	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	b21b      	sxth	r3, r3
 8003618:	4313      	orrs	r3, r2
 800361a:	b21b      	sxth	r3, r3
 800361c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800361e:	89fb      	ldrh	r3, [r7, #14]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3303      	adds	r3, #3
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	3202      	adds	r2, #2
 8003644:	7812      	ldrb	r2, [r2, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	3201      	adds	r2, #1
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
	return rv;
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	887a      	ldrh	r2, [r7, #2]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	1c53      	adds	r3, r2, #1
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	1c59      	adds	r1, r3, #1
 8003724:	6179      	str	r1, [r7, #20]
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3b01      	subs	r3, #1
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f1      	bne.n	800371a <mem_cpy+0x1a>
	}
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003742:	b480      	push	{r7}
 8003744:	b087      	sub	sp, #28
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	617a      	str	r2, [r7, #20]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3b01      	subs	r3, #1
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f3      	bne.n	8003752 <mem_set+0x10>
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	61fa      	str	r2, [r7, #28]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	61ba      	str	r2, [r7, #24]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	1acb      	subs	r3, r1, r3
 80037a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <mem_cmp+0x40>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0eb      	beq.n	8003790 <mem_cmp+0x18>

	return r;
 80037b8:	697b      	ldr	r3, [r7, #20]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80037d0:	e002      	b.n	80037d8 <chk_chr+0x12>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3301      	adds	r3, #1
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <chk_chr+0x26>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d1f2      	bne.n	80037d2 <chk_chr+0xc>
	return *str;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	781b      	ldrb	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e029      	b.n	8003864 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003810:	4a27      	ldr	r2, [pc, #156]	; (80038b0 <chk_lock+0xb4>)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	4413      	add	r3, r2
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01d      	beq.n	800385a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800381e:	4a24      	ldr	r2, [pc, #144]	; (80038b0 <chk_lock+0xb4>)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4413      	add	r3, r2
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d116      	bne.n	800385e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003830:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <chk_lock+0xb4>)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003840:	429a      	cmp	r2, r3
 8003842:	d10c      	bne.n	800385e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003844:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <chk_lock+0xb4>)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	4413      	add	r3, r2
 800384c:	3308      	adds	r3, #8
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003854:	429a      	cmp	r2, r3
 8003856:	d102      	bne.n	800385e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003858:	e007      	b.n	800386a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3301      	adds	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d9d2      	bls.n	8003810 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d109      	bne.n	8003884 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <chk_lock+0x80>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d101      	bne.n	8003880 <chk_lock+0x84>
 800387c:	2300      	movs	r3, #0
 800387e:	e010      	b.n	80038a2 <chk_lock+0xa6>
 8003880:	2312      	movs	r3, #18
 8003882:	e00e      	b.n	80038a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d108      	bne.n	800389c <chk_lock+0xa0>
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <chk_lock+0xb4>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	330c      	adds	r3, #12
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389a:	d101      	bne.n	80038a0 <chk_lock+0xa4>
 800389c:	2310      	movs	r3, #16
 800389e:	e000      	b.n	80038a2 <chk_lock+0xa6>
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000071c 	.word	0x2000071c

080038b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	e002      	b.n	80038c6 <enq_lock+0x12>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3301      	adds	r3, #1
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d806      	bhi.n	80038da <enq_lock+0x26>
 80038cc:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <enq_lock+0x40>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	4413      	add	r3, r2
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f2      	bne.n	80038c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	2000071c 	.word	0x2000071c

080038f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e01f      	b.n	8003948 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003908:	4a41      	ldr	r2, [pc, #260]	; (8003a10 <inc_lock+0x118>)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	4413      	add	r3, r2
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d113      	bne.n	8003942 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800391a:	4a3d      	ldr	r2, [pc, #244]	; (8003a10 <inc_lock+0x118>)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	4413      	add	r3, r2
 8003922:	3304      	adds	r3, #4
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800392a:	429a      	cmp	r2, r3
 800392c:	d109      	bne.n	8003942 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800392e:	4a38      	ldr	r2, [pc, #224]	; (8003a10 <inc_lock+0x118>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	4413      	add	r3, r2
 8003936:	3308      	adds	r3, #8
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800393e:	429a      	cmp	r2, r3
 8003940:	d006      	beq.n	8003950 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3301      	adds	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d9dc      	bls.n	8003908 <inc_lock+0x10>
 800394e:	e000      	b.n	8003952 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003950:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d132      	bne.n	80039be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e002      	b.n	8003964 <inc_lock+0x6c>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3301      	adds	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d806      	bhi.n	8003978 <inc_lock+0x80>
 800396a:	4a29      	ldr	r2, [pc, #164]	; (8003a10 <inc_lock+0x118>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	4413      	add	r3, r2
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f2      	bne.n	800395e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d101      	bne.n	8003982 <inc_lock+0x8a>
 800397e:	2300      	movs	r3, #0
 8003980:	e040      	b.n	8003a04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4922      	ldr	r1, [pc, #136]	; (8003a10 <inc_lock+0x118>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	440b      	add	r3, r1
 800398e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	491e      	ldr	r1, [pc, #120]	; (8003a10 <inc_lock+0x118>)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	440b      	add	r3, r1
 800399c:	3304      	adds	r3, #4
 800399e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	491a      	ldr	r1, [pc, #104]	; (8003a10 <inc_lock+0x118>)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	440b      	add	r3, r1
 80039ac:	3308      	adds	r3, #8
 80039ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80039b0:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <inc_lock+0x118>)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4413      	add	r3, r2
 80039b8:	330c      	adds	r3, #12
 80039ba:	2200      	movs	r2, #0
 80039bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <inc_lock+0xe0>
 80039c4:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <inc_lock+0x118>)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	4413      	add	r3, r2
 80039cc:	330c      	adds	r3, #12
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <inc_lock+0xe0>
 80039d4:	2300      	movs	r3, #0
 80039d6:	e015      	b.n	8003a04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d108      	bne.n	80039f0 <inc_lock+0xf8>
 80039de:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <inc_lock+0x118>)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	4413      	add	r3, r2
 80039e6:	330c      	adds	r3, #12
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	e001      	b.n	80039f4 <inc_lock+0xfc>
 80039f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039f4:	4906      	ldr	r1, [pc, #24]	; (8003a10 <inc_lock+0x118>)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	440b      	add	r3, r1
 80039fc:	330c      	adds	r3, #12
 80039fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3301      	adds	r3, #1
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	2000071c 	.word	0x2000071c

08003a14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	607b      	str	r3, [r7, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d825      	bhi.n	8003a74 <dec_lock+0x60>
		n = Files[i].ctr;
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <dec_lock+0x74>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	4413      	add	r3, r2
 8003a30:	330c      	adds	r3, #12
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003a36:	89fb      	ldrh	r3, [r7, #14]
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d101      	bne.n	8003a42 <dec_lock+0x2e>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003a42:	89fb      	ldrh	r3, [r7, #14]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <dec_lock+0x3a>
 8003a48:	89fb      	ldrh	r3, [r7, #14]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <dec_lock+0x74>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	4413      	add	r3, r2
 8003a56:	330c      	adds	r3, #12
 8003a58:	89fa      	ldrh	r2, [r7, #14]
 8003a5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003a5c:	89fb      	ldrh	r3, [r7, #14]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <dec_lock+0x5a>
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <dec_lock+0x74>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	4413      	add	r3, r2
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	737b      	strb	r3, [r7, #13]
 8003a72:	e001      	b.n	8003a78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003a74:	2302      	movs	r3, #2
 8003a76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003a78:	7b7b      	ldrb	r3, [r7, #13]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	2000071c 	.word	0x2000071c

08003a8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e010      	b.n	8003abc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003a9a:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <clear_lock+0x44>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	4413      	add	r3, r2
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d105      	bne.n	8003ab6 <clear_lock+0x2a>
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <clear_lock+0x44>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	4413      	add	r3, r2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d9eb      	bls.n	8003a9a <clear_lock+0xe>
	}
}
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	2000071c 	.word	0x2000071c

08003ad4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	78db      	ldrb	r3, [r3, #3]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d034      	beq.n	8003b52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7858      	ldrb	r0, [r3, #1]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003af8:	2301      	movs	r3, #1
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	f7ff fd40 	bl	8003580 <disk_write>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <sync_window+0x38>
			res = FR_DISK_ERR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
 8003b0a:	e022      	b.n	8003b52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	1ad2      	subs	r2, r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d217      	bcs.n	8003b52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	789b      	ldrb	r3, [r3, #2]
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	e010      	b.n	8003b4c <sync_window+0x78>
					wsect += fs->fsize;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4413      	add	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7858      	ldrb	r0, [r3, #1]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003b3e:	2301      	movs	r3, #1
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	f7ff fd1d 	bl	8003580 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d8eb      	bhi.n	8003b2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d01b      	beq.n	8003bac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ffad 	bl	8003ad4 <sync_window>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d113      	bne.n	8003bac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7858      	ldrb	r0, [r3, #1]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003b8e:	2301      	movs	r3, #1
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	f7ff fcd5 	bl	8003540 <disk_read>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff87 	bl	8003ad4 <sync_window>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d158      	bne.n	8003c82 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d148      	bne.n	8003c6a <sync_fs+0xb2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	791b      	ldrb	r3, [r3, #4]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d144      	bne.n	8003c6a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3330      	adds	r3, #48	; 0x30
 8003be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fda9 	bl	8003742 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3330      	adds	r3, #48	; 0x30
 8003bf4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003bf8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fd38 	bl	8003672 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3330      	adds	r3, #48	; 0x30
 8003c06:	4921      	ldr	r1, [pc, #132]	; (8003c8c <sync_fs+0xd4>)
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fd4d 	bl	80036a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3330      	adds	r3, #48	; 0x30
 8003c12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003c16:	491e      	ldr	r1, [pc, #120]	; (8003c90 <sync_fs+0xd8>)
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fd45 	bl	80036a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3330      	adds	r3, #48	; 0x30
 8003c22:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7ff fd3b 	bl	80036a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3330      	adds	r3, #48	; 0x30
 8003c36:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7ff fd31 	bl	80036a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7858      	ldrb	r0, [r3, #1]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f7ff fc8e 	bl	8003580 <disk_write>
			fs->fsi_flag = 0;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fca4 	bl	80035c0 <disk_ioctl>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <sync_fs+0xca>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	41615252 	.word	0x41615252
 8003c90:	61417272 	.word	0x61417272

08003c94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	3b02      	subs	r3, #2
 8003ca2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	3b02      	subs	r3, #2
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d301      	bcc.n	8003cb4 <clust2sect+0x20>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e008      	b.n	8003cc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	895b      	ldrh	r3, [r3, #10]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	fb03 f202 	mul.w	r2, r3, r2
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	4413      	add	r3, r2
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d904      	bls.n	8003cf2 <get_fat+0x20>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e08f      	b.n	8003e18 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d062      	beq.n	8003dcc <get_fat+0xfa>
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	dc7c      	bgt.n	8003e04 <get_fat+0x132>
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d002      	beq.n	8003d14 <get_fat+0x42>
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d042      	beq.n	8003d98 <get_fat+0xc6>
 8003d12:	e077      	b.n	8003e04 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	0a5b      	lsrs	r3, r3, #9
 8003d2a:	4413      	add	r3, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6938      	ldr	r0, [r7, #16]
 8003d30:	f7ff ff14 	bl	8003b5c <move_window>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d167      	bne.n	8003e0a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	60fa      	str	r2, [r7, #12]
 8003d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	0a5b      	lsrs	r3, r3, #9
 8003d56:	4413      	add	r3, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6938      	ldr	r0, [r7, #16]
 8003d5c:	f7ff fefe 	bl	8003b5c <move_window>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d153      	bne.n	8003e0e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	461a      	mov	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <get_fat+0xbc>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	e002      	b.n	8003d94 <get_fat+0xc2>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d94:	617b      	str	r3, [r7, #20]
			break;
 8003d96:	e03f      	b.n	8003e18 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	4413      	add	r3, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	6938      	ldr	r0, [r7, #16]
 8003da6:	f7ff fed9 	bl	8003b5c <move_window>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d130      	bne.n	8003e12 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fc1b 	bl	80035fc <ld_word>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	617b      	str	r3, [r7, #20]
			break;
 8003dca:	e025      	b.n	8003e18 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	09db      	lsrs	r3, r3, #7
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6938      	ldr	r0, [r7, #16]
 8003dda:	f7ff febf 	bl	8003b5c <move_window>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d118      	bne.n	8003e16 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003df2:	4413      	add	r3, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fc19 	bl	800362c <ld_dword>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e00:	617b      	str	r3, [r7, #20]
			break;
 8003e02:	e009      	b.n	8003e18 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003e04:	2301      	movs	r3, #1
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e006      	b.n	8003e18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e0a:	bf00      	nop
 8003e0c:	e004      	b.n	8003e18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e16:	bf00      	nop
		}
	}

	return val;
 8003e18:	697b      	ldr	r3, [r7, #20]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003e22:	b590      	push	{r4, r7, lr}
 8003e24:	b089      	sub	sp, #36	; 0x24
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f240 80d2 	bls.w	8003fde <put_fat+0x1bc>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	f080 80cc 	bcs.w	8003fde <put_fat+0x1bc>
		switch (fs->fs_type) {
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	f000 8096 	beq.w	8003f7c <put_fat+0x15a>
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	f300 80cd 	bgt.w	8003ff0 <put_fat+0x1ce>
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d002      	beq.n	8003e60 <put_fat+0x3e>
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d06e      	beq.n	8003f3c <put_fat+0x11a>
 8003e5e:	e0c7      	b.n	8003ff0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	0a5b      	lsrs	r3, r3, #9
 8003e76:	4413      	add	r3, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff fe6e 	bl	8003b5c <move_window>
 8003e80:	4603      	mov	r3, r0
 8003e82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e84:	7ffb      	ldrb	r3, [r7, #31]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f040 80ab 	bne.w	8003fe2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	61b9      	str	r1, [r7, #24]
 8003e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9c:	4413      	add	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <put_fat+0xa4>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	b25a      	sxtb	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	b25b      	sxtb	r3, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	e001      	b.n	8003eca <put_fat+0xa8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	0a5b      	lsrs	r3, r3, #9
 8003edc:	4413      	add	r3, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff fe3b 	bl	8003b5c <move_window>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003eea:	7ffb      	ldrb	r3, [r7, #31]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d17a      	bne.n	8003fe6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efc:	4413      	add	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <put_fat+0xf0>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e00e      	b.n	8003f30 <put_fat+0x10e>
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	b25b      	sxtb	r3, r3
 8003f18:	f023 030f 	bic.w	r3, r3, #15
 8003f1c:	b25a      	sxtb	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	b25b      	sxtb	r3, r3
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	b25b      	sxtb	r3, r3
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	70da      	strb	r2, [r3, #3]
			break;
 8003f3a:	e059      	b.n	8003ff0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a1a      	ldr	r2, [r3, #32]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	4413      	add	r3, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff fe07 	bl	8003b5c <move_window>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f52:	7ffb      	ldrb	r3, [r7, #31]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d148      	bne.n	8003fea <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003f66:	4413      	add	r3, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fb7f 	bl	8003672 <st_word>
			fs->wflag = 1;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	70da      	strb	r2, [r3, #3]
			break;
 8003f7a:	e039      	b.n	8003ff0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a1a      	ldr	r2, [r3, #32]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	09db      	lsrs	r3, r3, #7
 8003f84:	4413      	add	r3, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff fde7 	bl	8003b5c <move_window>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f92:	7ffb      	ldrb	r3, [r7, #31]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d12a      	bne.n	8003fee <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003fac:	4413      	add	r3, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fb3c 	bl	800362c <ld_dword>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fba:	4323      	orrs	r3, r4
 8003fbc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003fcc:	4413      	add	r3, r2
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fb69 	bl	80036a8 <st_dword>
			fs->wflag = 1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	70da      	strb	r2, [r3, #3]
			break;
 8003fdc:	e008      	b.n	8003ff0 <put_fat+0x1ce>
		}
	}
 8003fde:	bf00      	nop
 8003fe0:	e006      	b.n	8003ff0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003fee:	bf00      	nop
	return res;
 8003ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3724      	adds	r7, #36	; 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd90      	pop	{r4, r7, pc}

08003ffa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b088      	sub	sp, #32
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d904      	bls.n	8004020 <remove_chain+0x26>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	429a      	cmp	r2, r3
 800401e:	d301      	bcc.n	8004024 <remove_chain+0x2a>
 8004020:	2302      	movs	r3, #2
 8004022:	e04b      	b.n	80040bc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800402a:	f04f 32ff 	mov.w	r2, #4294967295
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	69b8      	ldr	r0, [r7, #24]
 8004032:	f7ff fef6 	bl	8003e22 <put_fat>
 8004036:	4603      	mov	r3, r0
 8004038:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800403a:	7ffb      	ldrb	r3, [r7, #31]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <remove_chain+0x4a>
 8004040:	7ffb      	ldrb	r3, [r7, #31]
 8004042:	e03b      	b.n	80040bc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7ff fe43 	bl	8003cd2 <get_fat>
 800404c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d031      	beq.n	80040b8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <remove_chain+0x64>
 800405a:	2302      	movs	r3, #2
 800405c:	e02e      	b.n	80040bc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d101      	bne.n	800406a <remove_chain+0x70>
 8004066:	2301      	movs	r3, #1
 8004068:	e028      	b.n	80040bc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800406a:	2200      	movs	r2, #0
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	69b8      	ldr	r0, [r7, #24]
 8004070:	f7ff fed7 	bl	8003e22 <put_fat>
 8004074:	4603      	mov	r3, r0
 8004076:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004078:	7ffb      	ldrb	r3, [r7, #31]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <remove_chain+0x88>
 800407e:	7ffb      	ldrb	r3, [r7, #31]
 8004080:	e01c      	b.n	80040bc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	3b02      	subs	r3, #2
 800408c:	429a      	cmp	r2, r3
 800408e:	d20b      	bcs.n	80040a8 <remove_chain+0xae>
			fs->free_clst++;
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	791b      	ldrb	r3, [r3, #4]
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d3c6      	bcc.n	8004044 <remove_chain+0x4a>
 80040b6:	e000      	b.n	80040ba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80040b8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <create_chain+0x2c>
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d31b      	bcc.n	8004128 <create_chain+0x64>
 80040f0:	2301      	movs	r3, #1
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e018      	b.n	8004128 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80040f6:	6839      	ldr	r1, [r7, #0]
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fdea 	bl	8003cd2 <get_fat>
 80040fe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d801      	bhi.n	800410a <create_chain+0x46>
 8004106:	2301      	movs	r3, #1
 8004108:	e070      	b.n	80041ec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d101      	bne.n	8004116 <create_chain+0x52>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	e06a      	b.n	80041ec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d201      	bcs.n	8004124 <create_chain+0x60>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	e063      	b.n	80041ec <create_chain+0x128>
		scl = clst;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	3301      	adds	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	429a      	cmp	r2, r3
 800413a:	d307      	bcc.n	800414c <create_chain+0x88>
				ncl = 2;
 800413c:	2302      	movs	r3, #2
 800413e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d901      	bls.n	800414c <create_chain+0x88>
 8004148:	2300      	movs	r3, #0
 800414a:	e04f      	b.n	80041ec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800414c:	69f9      	ldr	r1, [r7, #28]
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fdbf 	bl	8003cd2 <get_fat>
 8004154:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d003      	beq.n	800416a <create_chain+0xa6>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d101      	bne.n	800416e <create_chain+0xaa>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	e03e      	b.n	80041ec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	429a      	cmp	r2, r3
 8004174:	d1da      	bne.n	800412c <create_chain+0x68>
 8004176:	2300      	movs	r3, #0
 8004178:	e038      	b.n	80041ec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800417a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800417c:	f04f 32ff 	mov.w	r2, #4294967295
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	6938      	ldr	r0, [r7, #16]
 8004184:	f7ff fe4d 	bl	8003e22 <put_fat>
 8004188:	4603      	mov	r3, r0
 800418a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <create_chain+0xe2>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d006      	beq.n	80041a6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	6938      	ldr	r0, [r7, #16]
 800419e:	f7ff fe40 	bl	8003e22 <put_fat>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d116      	bne.n	80041da <create_chain+0x116>
		fs->last_clst = ncl;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	3b02      	subs	r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d804      	bhi.n	80041ca <create_chain+0x106>
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	791b      	ldrb	r3, [r3, #4]
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	711a      	strb	r2, [r3, #4]
 80041d8:	e007      	b.n	80041ea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80041da:	7dfb      	ldrb	r3, [r7, #23]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d102      	bne.n	80041e6 <create_chain+0x122>
 80041e0:	f04f 33ff 	mov.w	r3, #4294967295
 80041e4:	e000      	b.n	80041e8 <create_chain+0x124>
 80041e6:	2301      	movs	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80041ea:	69fb      	ldr	r3, [r7, #28]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	3304      	adds	r3, #4
 800420a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	0a5b      	lsrs	r3, r3, #9
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	8952      	ldrh	r2, [r2, #10]
 8004214:	fbb3 f3f2 	udiv	r3, r3, r2
 8004218:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1d1a      	adds	r2, r3, #4
 800421e:	613a      	str	r2, [r7, #16]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <clmt_clust+0x3a>
 800422a:	2300      	movs	r3, #0
 800422c:	e010      	b.n	8004250 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	d307      	bcc.n	8004246 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3304      	adds	r3, #4
 8004242:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004244:	e7e9      	b.n	800421a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004246:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	4413      	add	r3, r2
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004272:	d204      	bcs.n	800427e <dir_sdi+0x22>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <dir_sdi+0x26>
		return FR_INT_ERR;
 800427e:	2302      	movs	r3, #2
 8004280:	e063      	b.n	800434a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <dir_sdi+0x46>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d902      	bls.n	80042a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10c      	bne.n	80042c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	8912      	ldrh	r2, [r2, #8]
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d301      	bcc.n	80042b8 <dir_sdi+0x5c>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e048      	b.n	800434a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	61da      	str	r2, [r3, #28]
 80042c0:	e029      	b.n	8004316 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	895b      	ldrh	r3, [r3, #10]
 80042c6:	025b      	lsls	r3, r3, #9
 80042c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80042ca:	e019      	b.n	8004300 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6979      	ldr	r1, [r7, #20]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fcfe 	bl	8003cd2 <get_fat>
 80042d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d101      	bne.n	80042e4 <dir_sdi+0x88>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e032      	b.n	800434a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d904      	bls.n	80042f4 <dir_sdi+0x98>
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d301      	bcc.n	80042f8 <dir_sdi+0x9c>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e028      	b.n	800434a <dir_sdi+0xee>
			ofs -= csz;
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	429a      	cmp	r2, r3
 8004306:	d2e1      	bcs.n	80042cc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004308:	6979      	ldr	r1, [r7, #20]
 800430a:	6938      	ldr	r0, [r7, #16]
 800430c:	f7ff fcc2 	bl	8003c94 <clust2sect>
 8004310:	4602      	mov	r2, r0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <dir_sdi+0xcc>
 8004324:	2302      	movs	r3, #2
 8004326:	e010      	b.n	800434a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	0a5b      	lsrs	r3, r3, #9
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004342:	441a      	add	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b086      	sub	sp, #24
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	3320      	adds	r3, #32
 8004368:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <dir_next+0x28>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004378:	d301      	bcc.n	800437e <dir_next+0x2c>
 800437a:	2304      	movs	r3, #4
 800437c:	e0aa      	b.n	80044d4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 8098 	bne.w	80044ba <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10b      	bne.n	80043b4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	8912      	ldrh	r2, [r2, #8]
 80043a4:	4293      	cmp	r3, r2
 80043a6:	f0c0 8088 	bcc.w	80044ba <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	61da      	str	r2, [r3, #28]
 80043b0:	2304      	movs	r3, #4
 80043b2:	e08f      	b.n	80044d4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	0a5b      	lsrs	r3, r3, #9
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	8952      	ldrh	r2, [r2, #10]
 80043bc:	3a01      	subs	r2, #1
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d17a      	bne.n	80044ba <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7ff fc80 	bl	8003cd2 <get_fat>
 80043d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d801      	bhi.n	80043de <dir_next+0x8c>
 80043da:	2302      	movs	r3, #2
 80043dc:	e07a      	b.n	80044d4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d101      	bne.n	80043ea <dir_next+0x98>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e074      	b.n	80044d4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d358      	bcc.n	80044a6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	61da      	str	r2, [r3, #28]
 8004400:	2304      	movs	r3, #4
 8004402:	e067      	b.n	80044d4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	4619      	mov	r1, r3
 800440c:	4610      	mov	r0, r2
 800440e:	f7ff fe59 	bl	80040c4 <create_chain>
 8004412:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <dir_next+0xcc>
 800441a:	2307      	movs	r3, #7
 800441c:	e05a      	b.n	80044d4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <dir_next+0xd6>
 8004424:	2302      	movs	r3, #2
 8004426:	e055      	b.n	80044d4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d101      	bne.n	8004434 <dir_next+0xe2>
 8004430:	2301      	movs	r3, #1
 8004432:	e04f      	b.n	80044d4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fb4d 	bl	8003ad4 <sync_window>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <dir_next+0xf2>
 8004440:	2301      	movs	r3, #1
 8004442:	e047      	b.n	80044d4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3330      	adds	r3, #48	; 0x30
 8004448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f977 	bl	8003742 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	6979      	ldr	r1, [r7, #20]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f7ff fc1a 	bl	8003c94 <clust2sect>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	62da      	str	r2, [r3, #44]	; 0x2c
 8004466:	e012      	b.n	800448e <dir_next+0x13c>
						fs->wflag = 1;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff fb30 	bl	8003ad4 <sync_window>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <dir_next+0x12c>
 800447a:	2301      	movs	r3, #1
 800447c:	e02a      	b.n	80044d4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	3301      	adds	r3, #1
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	62da      	str	r2, [r3, #44]	; 0x2c
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	895b      	ldrh	r3, [r3, #10]
 8004492:	461a      	mov	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4293      	cmp	r3, r2
 8004498:	d3e6      	bcc.n	8004468 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad2      	subs	r2, r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80044ac:	6979      	ldr	r1, [r7, #20]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7ff fbf0 	bl	8003c94 <clust2sect>
 80044b4:	4602      	mov	r2, r0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044cc:	441a      	add	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80044ec:	2100      	movs	r1, #0
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff feb4 	bl	800425c <dir_sdi>
 80044f4:	4603      	mov	r3, r0
 80044f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d12b      	bne.n	8004556 <dir_alloc+0x7a>
		n = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	4619      	mov	r1, r3
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fb27 	bl	8003b5c <move_window>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d11d      	bne.n	8004554 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2be5      	cmp	r3, #229	; 0xe5
 8004520:	d004      	beq.n	800452c <dir_alloc+0x50>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d107      	bne.n	800453c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	3301      	adds	r3, #1
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d102      	bne.n	8004540 <dir_alloc+0x64>
 800453a:	e00c      	b.n	8004556 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004540:	2101      	movs	r1, #1
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff ff05 	bl	8004352 <dir_next>
 8004548:	4603      	mov	r3, r0
 800454a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800454c:	7dfb      	ldrb	r3, [r7, #23]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0d7      	beq.n	8004502 <dir_alloc+0x26>
 8004552:	e000      	b.n	8004556 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004554:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d101      	bne.n	8004560 <dir_alloc+0x84>
 800455c:	2307      	movs	r3, #7
 800455e:	75fb      	strb	r3, [r7, #23]
	return res;
 8004560:	7dfb      	ldrb	r3, [r7, #23]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	331a      	adds	r3, #26
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff f83f 	bl	80035fc <ld_word>
 800457e:	4603      	mov	r3, r0
 8004580:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b03      	cmp	r3, #3
 8004588:	d109      	bne.n	800459e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	3314      	adds	r3, #20
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff f834 	bl	80035fc <ld_word>
 8004594:	4603      	mov	r3, r0
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800459e:	68fb      	ldr	r3, [r7, #12]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	331a      	adds	r3, #26
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	b292      	uxth	r2, r2
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff f857 	bl	8003672 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d109      	bne.n	80045e0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f103 0214 	add.w	r2, r3, #20
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7ff f849 	bl	8003672 <st_word>
	}
}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80045f6:	2100      	movs	r1, #0
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff fe2f 	bl	800425c <dir_sdi>
 80045fe:	4603      	mov	r3, r0
 8004600:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <dir_find+0x24>
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	e03e      	b.n	800468a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4619      	mov	r1, r3
 8004612:	6938      	ldr	r0, [r7, #16]
 8004614:	f7ff faa2 	bl	8003b5c <move_window>
 8004618:	4603      	mov	r3, r0
 800461a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d12f      	bne.n	8004682 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <dir_find+0x4e>
 8004630:	2304      	movs	r3, #4
 8004632:	75fb      	strb	r3, [r7, #23]
 8004634:	e028      	b.n	8004688 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	330b      	adds	r3, #11
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004642:	b2da      	uxtb	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	330b      	adds	r3, #11
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <dir_find+0x86>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a18      	ldr	r0, [r3, #32]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3324      	adds	r3, #36	; 0x24
 8004660:	220b      	movs	r2, #11
 8004662:	4619      	mov	r1, r3
 8004664:	f7ff f888 	bl	8003778 <mem_cmp>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800466e:	2100      	movs	r1, #0
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff fe6e 	bl	8004352 <dir_next>
 8004676:	4603      	mov	r3, r0
 8004678:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800467a:	7dfb      	ldrb	r3, [r7, #23]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0c5      	beq.n	800460c <dir_find+0x24>
 8004680:	e002      	b.n	8004688 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004682:	bf00      	nop
 8004684:	e000      	b.n	8004688 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004686:	bf00      	nop

	return res;
 8004688:	7dfb      	ldrb	r3, [r7, #23]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80046a0:	2101      	movs	r1, #1
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff ff1a 	bl	80044dc <dir_alloc>
 80046a8:	4603      	mov	r3, r0
 80046aa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11c      	bne.n	80046ec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4619      	mov	r1, r3
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	f7ff fa4f 	bl	8003b5c <move_window>
 80046be:	4603      	mov	r3, r0
 80046c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d111      	bne.n	80046ec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	2220      	movs	r2, #32
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff f836 	bl	8003742 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a18      	ldr	r0, [r3, #32]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3324      	adds	r3, #36	; 0x24
 80046de:	220b      	movs	r2, #11
 80046e0:	4619      	mov	r1, r3
 80046e2:	f7ff f80d 	bl	8003700 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2201      	movs	r2, #1
 80046ea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3324      	adds	r3, #36	; 0x24
 800470c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800470e:	220b      	movs	r2, #11
 8004710:	2120      	movs	r1, #32
 8004712:	68b8      	ldr	r0, [r7, #8]
 8004714:	f7ff f815 	bl	8003742 <mem_set>
	si = i = 0; ni = 8;
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	2308      	movs	r3, #8
 8004722:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	61fa      	str	r2, [r7, #28]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004732:	7efb      	ldrb	r3, [r7, #27]
 8004734:	2b20      	cmp	r3, #32
 8004736:	d94e      	bls.n	80047d6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004738:	7efb      	ldrb	r3, [r7, #27]
 800473a:	2b2f      	cmp	r3, #47	; 0x2f
 800473c:	d006      	beq.n	800474c <create_name+0x54>
 800473e:	7efb      	ldrb	r3, [r7, #27]
 8004740:	2b5c      	cmp	r3, #92	; 0x5c
 8004742:	d110      	bne.n	8004766 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004744:	e002      	b.n	800474c <create_name+0x54>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	4413      	add	r3, r2
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b2f      	cmp	r3, #47	; 0x2f
 8004756:	d0f6      	beq.n	8004746 <create_name+0x4e>
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b5c      	cmp	r3, #92	; 0x5c
 8004762:	d0f0      	beq.n	8004746 <create_name+0x4e>
			break;
 8004764:	e038      	b.n	80047d8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004766:	7efb      	ldrb	r3, [r7, #27]
 8004768:	2b2e      	cmp	r3, #46	; 0x2e
 800476a:	d003      	beq.n	8004774 <create_name+0x7c>
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	429a      	cmp	r2, r3
 8004772:	d30c      	bcc.n	800478e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2b0b      	cmp	r3, #11
 8004778:	d002      	beq.n	8004780 <create_name+0x88>
 800477a:	7efb      	ldrb	r3, [r7, #27]
 800477c:	2b2e      	cmp	r3, #46	; 0x2e
 800477e:	d001      	beq.n	8004784 <create_name+0x8c>
 8004780:	2306      	movs	r3, #6
 8004782:	e044      	b.n	800480e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004784:	2308      	movs	r3, #8
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	230b      	movs	r3, #11
 800478a:	617b      	str	r3, [r7, #20]
			continue;
 800478c:	e022      	b.n	80047d4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800478e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004792:	2b00      	cmp	r3, #0
 8004794:	da04      	bge.n	80047a0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004796:	7efb      	ldrb	r3, [r7, #27]
 8004798:	3b80      	subs	r3, #128	; 0x80
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <create_name+0x120>)
 800479c:	5cd3      	ldrb	r3, [r2, r3]
 800479e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80047a0:	7efb      	ldrb	r3, [r7, #27]
 80047a2:	4619      	mov	r1, r3
 80047a4:	481d      	ldr	r0, [pc, #116]	; (800481c <create_name+0x124>)
 80047a6:	f7ff f80e 	bl	80037c6 <chk_chr>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <create_name+0xbc>
 80047b0:	2306      	movs	r3, #6
 80047b2:	e02c      	b.n	800480e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80047b4:	7efb      	ldrb	r3, [r7, #27]
 80047b6:	2b60      	cmp	r3, #96	; 0x60
 80047b8:	d905      	bls.n	80047c6 <create_name+0xce>
 80047ba:	7efb      	ldrb	r3, [r7, #27]
 80047bc:	2b7a      	cmp	r3, #122	; 0x7a
 80047be:	d802      	bhi.n	80047c6 <create_name+0xce>
 80047c0:	7efb      	ldrb	r3, [r7, #27]
 80047c2:	3b20      	subs	r3, #32
 80047c4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	613a      	str	r2, [r7, #16]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	4413      	add	r3, r2
 80047d0:	7efa      	ldrb	r2, [r7, #27]
 80047d2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80047d4:	e7a6      	b.n	8004724 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80047d6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	441a      	add	r2, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <create_name+0xf4>
 80047e8:	2306      	movs	r3, #6
 80047ea:	e010      	b.n	800480e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2be5      	cmp	r3, #229	; 0xe5
 80047f2:	d102      	bne.n	80047fa <create_name+0x102>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2205      	movs	r2, #5
 80047f8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80047fa:	7efb      	ldrb	r3, [r7, #27]
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d801      	bhi.n	8004804 <create_name+0x10c>
 8004800:	2204      	movs	r2, #4
 8004802:	e000      	b.n	8004806 <create_name+0x10e>
 8004804:	2200      	movs	r2, #0
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	330b      	adds	r3, #11
 800480a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800480c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	080064a0 	.word	0x080064a0
 800481c:	08006438 	.word	0x08006438

08004820 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004834:	e002      	b.n	800483c <follow_path+0x1c>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b2f      	cmp	r3, #47	; 0x2f
 8004842:	d0f8      	beq.n	8004836 <follow_path+0x16>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b5c      	cmp	r3, #92	; 0x5c
 800484a:	d0f4      	beq.n	8004836 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b1f      	cmp	r3, #31
 8004858:	d80a      	bhi.n	8004870 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2280      	movs	r2, #128	; 0x80
 800485e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004862:	2100      	movs	r1, #0
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff fcf9 	bl	800425c <dir_sdi>
 800486a:	4603      	mov	r3, r0
 800486c:	75fb      	strb	r3, [r7, #23]
 800486e:	e043      	b.n	80048f8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004870:	463b      	mov	r3, r7
 8004872:	4619      	mov	r1, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff3f 	bl	80046f8 <create_name>
 800487a:	4603      	mov	r3, r0
 800487c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d134      	bne.n	80048ee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff feaf 	bl	80045e8 <dir_find>
 800488a:	4603      	mov	r3, r0
 800488c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004894:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d127      	bne.n	80048f2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80048a2:	7afb      	ldrb	r3, [r7, #11]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d122      	bne.n	80048f2 <follow_path+0xd2>
 80048ac:	2305      	movs	r3, #5
 80048ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80048b0:	e01f      	b.n	80048f2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80048b2:	7afb      	ldrb	r3, [r7, #11]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11c      	bne.n	80048f6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	799b      	ldrb	r3, [r3, #6]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 80048c8:	2305      	movs	r3, #5
 80048ca:	75fb      	strb	r3, [r7, #23]
 80048cc:	e014      	b.n	80048f8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048dc:	4413      	add	r3, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f7ff fe42 	bl	800456a <ld_clust>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80048ec:	e7c0      	b.n	8004870 <follow_path+0x50>
			if (res != FR_OK) break;
 80048ee:	bf00      	nop
 80048f0:	e002      	b.n	80048f8 <follow_path+0xd8>
				break;
 80048f2:	bf00      	nop
 80048f4:	e000      	b.n	80048f8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80048f6:	bf00      	nop
			}
		}
	}

	return res;
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004902:	b480      	push	{r7}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295
 800490e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d031      	beq.n	800497c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e002      	b.n	8004926 <get_ldnumber+0x24>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3301      	adds	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b20      	cmp	r3, #32
 800492c:	d903      	bls.n	8004936 <get_ldnumber+0x34>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b3a      	cmp	r3, #58	; 0x3a
 8004934:	d1f4      	bne.n	8004920 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b3a      	cmp	r3, #58	; 0x3a
 800493c:	d11c      	bne.n	8004978 <get_ldnumber+0x76>
			tp = *path;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	60fa      	str	r2, [r7, #12]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	3b30      	subs	r3, #48	; 0x30
 800494e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b09      	cmp	r3, #9
 8004954:	d80e      	bhi.n	8004974 <get_ldnumber+0x72>
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	429a      	cmp	r2, r3
 800495c:	d10a      	bne.n	8004974 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d107      	bne.n	8004974 <get_ldnumber+0x72>
					vol = (int)i;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3301      	adds	r3, #1
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	e002      	b.n	800497e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800497c:	693b      	ldr	r3, [r7, #16]
}
 800497e:	4618      	mov	r0, r3
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	70da      	strb	r2, [r3, #3]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff f8d8 	bl	8003b5c <move_window>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <check_fs+0x2a>
 80049b2:	2304      	movs	r3, #4
 80049b4:	e038      	b.n	8004a28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3330      	adds	r3, #48	; 0x30
 80049ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fe1c 	bl	80035fc <ld_word>
 80049c4:	4603      	mov	r3, r0
 80049c6:	461a      	mov	r2, r3
 80049c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <check_fs+0x48>
 80049d0:	2303      	movs	r3, #3
 80049d2:	e029      	b.n	8004a28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049da:	2be9      	cmp	r3, #233	; 0xe9
 80049dc:	d009      	beq.n	80049f2 <check_fs+0x66>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049e4:	2beb      	cmp	r3, #235	; 0xeb
 80049e6:	d11e      	bne.n	8004a26 <check_fs+0x9a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80049ee:	2b90      	cmp	r3, #144	; 0x90
 80049f0:	d119      	bne.n	8004a26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3330      	adds	r3, #48	; 0x30
 80049f6:	3336      	adds	r3, #54	; 0x36
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe fe17 	bl	800362c <ld_dword>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a04:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <check_fs+0xa4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <check_fs+0x82>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e00c      	b.n	8004a28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3330      	adds	r3, #48	; 0x30
 8004a12:	3352      	adds	r3, #82	; 0x52
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fe fe09 	bl	800362c <ld_dword>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4a05      	ldr	r2, [pc, #20]	; (8004a34 <check_fs+0xa8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <check_fs+0x9a>
 8004a22:	2300      	movs	r3, #0
 8004a24:	e000      	b.n	8004a28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004a26:	2302      	movs	r3, #2
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	00544146 	.word	0x00544146
 8004a34:	33544146 	.word	0x33544146

08004a38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b096      	sub	sp, #88	; 0x58
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff ff58 	bl	8004902 <get_ldnumber>
 8004a52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da01      	bge.n	8004a5e <find_volume+0x26>
 8004a5a:	230b      	movs	r3, #11
 8004a5c:	e22d      	b.n	8004eba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004a5e:	4aa1      	ldr	r2, [pc, #644]	; (8004ce4 <find_volume+0x2ac>)
 8004a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <find_volume+0x3a>
 8004a6e:	230c      	movs	r3, #12
 8004a70:	e223      	b.n	8004eba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01a      	beq.n	8004abe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe fd17 	bl	80034c0 <disk_status>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004a98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10c      	bne.n	8004abe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <find_volume+0x82>
 8004aaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	e1ff      	b.n	8004eba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004aba:	2300      	movs	r3, #0
 8004abc:	e1fd      	b.n	8004eba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe fd0f 	bl	80034f4 <disk_initialize>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004adc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e1e6      	b.n	8004eba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <find_volume+0xca>
 8004af2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004afe:	230a      	movs	r3, #10
 8004b00:	e1db      	b.n	8004eba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004b06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b0a:	f7ff ff3f 	bl	800498c <check_fs>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d149      	bne.n	8004bb0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b20:	e01e      	b.n	8004b60 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004b30:	4413      	add	r3, r2
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	3304      	adds	r3, #4
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d006      	beq.n	8004b4c <find_volume+0x114>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	3308      	adds	r3, #8
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe fd72 	bl	800362c <ld_dword>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	e000      	b.n	8004b4e <find_volume+0x116>
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	3358      	adds	r3, #88	; 0x58
 8004b54:	443b      	add	r3, r7
 8004b56:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d9dd      	bls.n	8004b22 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004b66:	2300      	movs	r3, #0
 8004b68:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <find_volume+0x13e>
 8004b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b72:	3b01      	subs	r3, #1
 8004b74:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	3358      	adds	r3, #88	; 0x58
 8004b7c:	443b      	add	r3, r7
 8004b7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004b82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <find_volume+0x15e>
 8004b8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b8e:	f7ff fefd 	bl	800498c <check_fs>
 8004b92:	4603      	mov	r3, r0
 8004b94:	e000      	b.n	8004b98 <find_volume+0x160>
 8004b96:	2303      	movs	r3, #3
 8004b98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d905      	bls.n	8004bb0 <find_volume+0x178>
 8004ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8004baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d9e2      	bls.n	8004b76 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d101      	bne.n	8004bbc <find_volume+0x184>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e17e      	b.n	8004eba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d901      	bls.n	8004bc8 <find_volume+0x190>
 8004bc4:	230d      	movs	r3, #13
 8004bc6:	e178      	b.n	8004eba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	3330      	adds	r3, #48	; 0x30
 8004bcc:	330b      	adds	r3, #11
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fd14 	bl	80035fc <ld_word>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bda:	d001      	beq.n	8004be0 <find_volume+0x1a8>
 8004bdc:	230d      	movs	r3, #13
 8004bde:	e16c      	b.n	8004eba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	3330      	adds	r3, #48	; 0x30
 8004be4:	3316      	adds	r3, #22
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fd08 	bl	80035fc <ld_word>
 8004bec:	4603      	mov	r3, r0
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <find_volume+0x1cc>
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	3330      	adds	r3, #48	; 0x30
 8004bfa:	3324      	adds	r3, #36	; 0x24
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fd15 	bl	800362c <ld_dword>
 8004c02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c08:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	789b      	ldrb	r3, [r3, #2]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d005      	beq.n	8004c28 <find_volume+0x1f0>
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	789b      	ldrb	r3, [r3, #2]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d001      	beq.n	8004c28 <find_volume+0x1f0>
 8004c24:	230d      	movs	r3, #13
 8004c26:	e148      	b.n	8004eba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	789b      	ldrb	r3, [r3, #2]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	895b      	ldrh	r3, [r3, #10]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <find_volume+0x224>
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	895b      	ldrh	r3, [r3, #10]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	895b      	ldrh	r3, [r3, #10]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <find_volume+0x228>
 8004c5c:	230d      	movs	r3, #13
 8004c5e:	e12c      	b.n	8004eba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c62:	3330      	adds	r3, #48	; 0x30
 8004c64:	3311      	adds	r3, #17
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fcc8 	bl	80035fc <ld_word>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	891b      	ldrh	r3, [r3, #8]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <find_volume+0x24e>
 8004c82:	230d      	movs	r3, #13
 8004c84:	e119      	b.n	8004eba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	3330      	adds	r3, #48	; 0x30
 8004c8a:	3313      	adds	r3, #19
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fe fcb5 	bl	80035fc <ld_word>
 8004c92:	4603      	mov	r3, r0
 8004c94:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <find_volume+0x272>
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9e:	3330      	adds	r3, #48	; 0x30
 8004ca0:	3320      	adds	r3, #32
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fcc2 	bl	800362c <ld_dword>
 8004ca8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	3330      	adds	r3, #48	; 0x30
 8004cae:	330e      	adds	r3, #14
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fe fca3 	bl	80035fc <ld_word>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004cba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <find_volume+0x28c>
 8004cc0:	230d      	movs	r3, #13
 8004cc2:	e0fa      	b.n	8004eba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004cc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc8:	4413      	add	r3, r2
 8004cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ccc:	8912      	ldrh	r2, [r2, #8]
 8004cce:	0912      	lsrs	r2, r2, #4
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d204      	bcs.n	8004ce8 <find_volume+0x2b0>
 8004cde:	230d      	movs	r3, #13
 8004ce0:	e0eb      	b.n	8004eba <find_volume+0x482>
 8004ce2:	bf00      	nop
 8004ce4:	20000714 	.word	0x20000714
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cf0:	8952      	ldrh	r2, [r2, #10]
 8004cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <find_volume+0x2ca>
 8004cfe:	230d      	movs	r3, #13
 8004d00:	e0db      	b.n	8004eba <find_volume+0x482>
		fmt = FS_FAT32;
 8004d02:	2303      	movs	r3, #3
 8004d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d802      	bhi.n	8004d18 <find_volume+0x2e0>
 8004d12:	2302      	movs	r3, #2
 8004d14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d802      	bhi.n	8004d28 <find_volume+0x2f0>
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	1c9a      	adds	r2, r3, #2
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d34:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004d36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3a:	441a      	add	r2, r3
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004d40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	441a      	add	r2, r3
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d11e      	bne.n	8004d90 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	3330      	adds	r3, #48	; 0x30
 8004d56:	332a      	adds	r3, #42	; 0x2a
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe fc4f 	bl	80035fc <ld_word>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <find_volume+0x330>
 8004d64:	230d      	movs	r3, #13
 8004d66:	e0a8      	b.n	8004eba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	891b      	ldrh	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <find_volume+0x33c>
 8004d70:	230d      	movs	r3, #13
 8004d72:	e0a2      	b.n	8004eba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	3330      	adds	r3, #48	; 0x30
 8004d78:	332c      	adds	r3, #44	; 0x2c
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fc56 	bl	800362c <ld_dword>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8e:	e01f      	b.n	8004dd0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	891b      	ldrh	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <find_volume+0x364>
 8004d98:	230d      	movs	r3, #13
 8004d9a:	e08e      	b.n	8004eba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	6a1a      	ldr	r2, [r3, #32]
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	441a      	add	r2, r3
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004da8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d103      	bne.n	8004db8 <find_volume+0x380>
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	e00a      	b.n	8004dce <find_volume+0x396>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4413      	add	r3, r2
 8004dc2:	085a      	lsrs	r2, r3, #1
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004dce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004dda:	0a5b      	lsrs	r3, r3, #9
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d201      	bcs.n	8004de4 <find_volume+0x3ac>
 8004de0:	230d      	movs	r3, #13
 8004de2:	e06a      	b.n	8004eba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	611a      	str	r2, [r3, #16]
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	2280      	movs	r2, #128	; 0x80
 8004df8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d149      	bne.n	8004e96 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	3330      	adds	r3, #48	; 0x30
 8004e06:	3330      	adds	r3, #48	; 0x30
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe fbf7 	bl	80035fc <ld_word>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d140      	bne.n	8004e96 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e16:	3301      	adds	r3, #1
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e1c:	f7fe fe9e 	bl	8003b5c <move_window>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d137      	bne.n	8004e96 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2200      	movs	r2, #0
 8004e2a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	3330      	adds	r3, #48	; 0x30
 8004e30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fe fbe1 	bl	80035fc <ld_word>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d127      	bne.n	8004e96 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	3330      	adds	r3, #48	; 0x30
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fbee 	bl	800362c <ld_dword>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <find_volume+0x48c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d11e      	bne.n	8004e96 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	3330      	adds	r3, #48	; 0x30
 8004e5c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe fbe3 	bl	800362c <ld_dword>
 8004e66:	4603      	mov	r3, r0
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <find_volume+0x490>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d113      	bne.n	8004e96 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	3330      	adds	r3, #48	; 0x30
 8004e72:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fbd8 	bl	800362c <ld_dword>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	3330      	adds	r3, #48	; 0x30
 8004e86:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fbce 	bl	800362c <ld_dword>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004e9c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <find_volume+0x494>)
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <find_volume+0x494>)
 8004ea8:	801a      	strh	r2, [r3, #0]
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <find_volume+0x494>)
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004eb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004eb4:	f7fe fdea 	bl	8003a8c <clear_lock>
#endif
	return FR_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3758      	adds	r7, #88	; 0x58
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	41615252 	.word	0x41615252
 8004ec8:	61417272 	.word	0x61417272
 8004ecc:	20000718 	.word	0x20000718

08004ed0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004eda:	2309      	movs	r3, #9
 8004edc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01c      	beq.n	8004f1e <validate+0x4e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d018      	beq.n	8004f1e <validate+0x4e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d013      	beq.n	8004f1e <validate+0x4e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	889a      	ldrh	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	88db      	ldrh	r3, [r3, #6]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d10c      	bne.n	8004f1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fad8 	bl	80034c0 <disk_status>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <validate+0x4e>
			res = FR_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <validate+0x5a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	e000      	b.n	8004f2c <validate+0x5c>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	6013      	str	r3, [r2, #0]
	return res;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004f4e:	f107 0310 	add.w	r3, r7, #16
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fcd5 	bl	8004902 <get_ldnumber>
 8004f58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	da01      	bge.n	8004f64 <f_mount+0x28>
 8004f60:	230b      	movs	r3, #11
 8004f62:	e02b      	b.n	8004fbc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <f_mount+0x88>)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004f74:	69b8      	ldr	r0, [r7, #24]
 8004f76:	f7fe fd89 	bl	8003a8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	490d      	ldr	r1, [pc, #52]	; (8004fc4 <f_mount+0x88>)
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <f_mount+0x66>
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d001      	beq.n	8004fa6 <f_mount+0x6a>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e00a      	b.n	8004fbc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004fa6:	f107 010c 	add.w	r1, r7, #12
 8004faa:	f107 0308 	add.w	r3, r7, #8
 8004fae:	2200      	movs	r2, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fd41 	bl	8004a38 <find_volume>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000714 	.word	0x20000714

08004fc8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b098      	sub	sp, #96	; 0x60
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <f_open+0x18>
 8004fdc:	2309      	movs	r3, #9
 8004fde:	e1ad      	b.n	800533c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004fe8:	79fa      	ldrb	r2, [r7, #7]
 8004fea:	f107 0110 	add.w	r1, r7, #16
 8004fee:	f107 0308 	add.w	r3, r7, #8
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fd20 	bl	8004a38 <find_volume>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 8191 	bne.w	800532a <f_open+0x362>
		dj.obj.fs = fs;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	f107 0314 	add.w	r3, r7, #20
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fc03 	bl	8004820 <follow_path>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d11a      	bne.n	800505e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005028:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800502c:	b25b      	sxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	da03      	bge.n	800503a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005032:	2306      	movs	r3, #6
 8005034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005038:	e011      	b.n	800505e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	f107 0314 	add.w	r3, r7, #20
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fbd2 	bl	80037fc <chk_lock>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	f003 031c 	and.w	r3, r3, #28
 8005064:	2b00      	cmp	r3, #0
 8005066:	d07f      	beq.n	8005168 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800506c:	2b00      	cmp	r3, #0
 800506e:	d017      	beq.n	80050a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005074:	2b04      	cmp	r3, #4
 8005076:	d10e      	bne.n	8005096 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005078:	f7fe fc1c 	bl	80038b4 <enq_lock>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d006      	beq.n	8005090 <f_open+0xc8>
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fb03 	bl	8004692 <dir_register>
 800508c:	4603      	mov	r3, r0
 800508e:	e000      	b.n	8005092 <f_open+0xca>
 8005090:	2312      	movs	r3, #18
 8005092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	f043 0308 	orr.w	r3, r3, #8
 800509c:	71fb      	strb	r3, [r7, #7]
 800509e:	e010      	b.n	80050c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80050a0:	7ebb      	ldrb	r3, [r7, #26]
 80050a2:	f003 0311 	and.w	r3, r3, #17
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <f_open+0xea>
					res = FR_DENIED;
 80050aa:	2307      	movs	r3, #7
 80050ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80050b0:	e007      	b.n	80050c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <f_open+0xfa>
 80050bc:	2308      	movs	r3, #8
 80050be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80050c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d168      	bne.n	800519c <f_open+0x1d4>
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d063      	beq.n	800519c <f_open+0x1d4>
				dw = GET_FATTIME();
 80050d4:	f7fe f8a2 	bl	800321c <get_fattime>
 80050d8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	330e      	adds	r3, #14
 80050de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe fae1 	bl	80036a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	3316      	adds	r3, #22
 80050ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe fadb 	bl	80036a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	330b      	adds	r3, #11
 80050f6:	2220      	movs	r2, #32
 80050f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fa32 	bl	800456a <ld_clust>
 8005106:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800510c:	2200      	movs	r2, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fa4a 	bl	80045a8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	331c      	adds	r3, #28
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fac4 	bl	80036a8 <st_dword>
					fs->wflag = 1;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2201      	movs	r2, #1
 8005124:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d037      	beq.n	800519c <f_open+0x1d4>
						dw = fs->winsect;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	2200      	movs	r2, #0
 8005138:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe ff5d 	bl	8003ffa <remove_chain>
 8005140:	4603      	mov	r3, r0
 8005142:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005146:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800514a:	2b00      	cmp	r3, #0
 800514c:	d126      	bne.n	800519c <f_open+0x1d4>
							res = move_window(fs, dw);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fd02 	bl	8003b5c <move_window>
 8005158:	4603      	mov	r3, r0
 800515a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005162:	3a01      	subs	r2, #1
 8005164:	60da      	str	r2, [r3, #12]
 8005166:	e019      	b.n	800519c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005168:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800516c:	2b00      	cmp	r3, #0
 800516e:	d115      	bne.n	800519c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005170:	7ebb      	ldrb	r3, [r7, #26]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <f_open+0x1ba>
					res = FR_NO_FILE;
 800517a:	2304      	movs	r3, #4
 800517c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005180:	e00c      	b.n	800519c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <f_open+0x1d4>
 800518c:	7ebb      	ldrb	r3, [r7, #26]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <f_open+0x1d4>
						res = FR_DENIED;
 8005196:	2307      	movs	r3, #7
 8005198:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800519c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d128      	bne.n	80051f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80051be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bf14      	ite	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	2300      	moveq	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	f107 0314 	add.w	r3, r7, #20
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fb8b 	bl	80038f8 <inc_lock>
 80051e2:	4602      	mov	r2, r0
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <f_open+0x22e>
 80051f0:	2302      	movs	r3, #2
 80051f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80051f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 8095 	bne.w	800532a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff f9af 	bl	800456a <ld_clust>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	331c      	adds	r3, #28
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe fa08 	bl	800362c <ld_dword>
 800521c:	4602      	mov	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	88da      	ldrh	r2, [r3, #6]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	79fa      	ldrb	r2, [r7, #7]
 800523a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3330      	adds	r3, #48	; 0x30
 8005252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fa72 	bl	8003742 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d060      	beq.n	800532a <f_open+0x362>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d05c      	beq.n	800532a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	895b      	ldrh	r3, [r3, #10]
 800527c:	025b      	lsls	r3, r3, #9
 800527e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	657b      	str	r3, [r7, #84]	; 0x54
 800528c:	e016      	b.n	80052bc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005292:	4618      	mov	r0, r3
 8005294:	f7fe fd1d 	bl	8003cd2 <get_fat>
 8005298:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800529a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800529c:	2b01      	cmp	r3, #1
 800529e:	d802      	bhi.n	80052a6 <f_open+0x2de>
 80052a0:	2302      	movs	r3, #2
 80052a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80052a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d102      	bne.n	80052b4 <f_open+0x2ec>
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80052b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	657b      	str	r3, [r7, #84]	; 0x54
 80052bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d103      	bne.n	80052cc <f_open+0x304>
 80052c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d8e0      	bhi.n	800528e <f_open+0x2c6>
				}
				fp->clust = clst;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80052d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d127      	bne.n	800532a <f_open+0x362>
 80052da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d022      	beq.n	800532a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fe fcd3 	bl	8003c94 <clust2sect>
 80052ee:	6478      	str	r0, [r7, #68]	; 0x44
 80052f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <f_open+0x336>
						res = FR_INT_ERR;
 80052f6:	2302      	movs	r3, #2
 80052f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80052fc:	e015      	b.n	800532a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80052fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005300:	0a5a      	lsrs	r2, r3, #9
 8005302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	7858      	ldrb	r0, [r3, #1]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	2301      	movs	r3, #1
 800531a:	f7fe f911 	bl	8003540 <disk_read>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <f_open+0x362>
 8005324:	2301      	movs	r3, #1
 8005326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800532a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <f_open+0x370>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005338:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800533c:	4618      	mov	r0, r3
 800533e:	3760      	adds	r7, #96	; 0x60
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	; 0x38
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f107 0214 	add.w	r2, r7, #20
 8005362:	4611      	mov	r1, r2
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fdb3 	bl	8004ed0 <validate>
 800536a:	4603      	mov	r3, r0
 800536c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005370:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005374:	2b00      	cmp	r3, #0
 8005376:	d107      	bne.n	8005388 <f_read+0x44>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	7d5b      	ldrb	r3, [r3, #21]
 800537c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005380:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <f_read+0x4a>
 8005388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800538c:	e115      	b.n	80055ba <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	7d1b      	ldrb	r3, [r3, #20]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <f_read+0x5a>
 800539a:	2307      	movs	r3, #7
 800539c:	e10d      	b.n	80055ba <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	f240 80fe 	bls.w	80055b0 <f_read+0x26c>
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80053b8:	e0fa      	b.n	80055b0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f040 80c6 	bne.w	8005554 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	0a5b      	lsrs	r3, r3, #9
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	8952      	ldrh	r2, [r2, #10]
 80053d2:	3a01      	subs	r2, #1
 80053d4:	4013      	ands	r3, r2
 80053d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d12f      	bne.n	800543e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	633b      	str	r3, [r7, #48]	; 0x30
 80053ec:	e013      	b.n	8005416 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	4619      	mov	r1, r3
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7fe fef9 	bl	80041f4 <clmt_clust>
 8005402:	6338      	str	r0, [r7, #48]	; 0x30
 8005404:	e007      	b.n	8005416 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f7fe fc5f 	bl	8003cd2 <get_fat>
 8005414:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	2b01      	cmp	r3, #1
 800541a:	d804      	bhi.n	8005426 <f_read+0xe2>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2202      	movs	r2, #2
 8005420:	755a      	strb	r2, [r3, #21]
 8005422:	2302      	movs	r3, #2
 8005424:	e0c9      	b.n	80055ba <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d104      	bne.n	8005438 <f_read+0xf4>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	755a      	strb	r2, [r3, #21]
 8005434:	2301      	movs	r3, #1
 8005436:	e0c0      	b.n	80055ba <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f7fe fc24 	bl	8003c94 <clust2sect>
 800544c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d104      	bne.n	800545e <f_read+0x11a>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2202      	movs	r2, #2
 8005458:	755a      	strb	r2, [r3, #21]
 800545a:	2302      	movs	r3, #2
 800545c:	e0ad      	b.n	80055ba <f_read+0x276>
			sect += csect;
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	0a5b      	lsrs	r3, r3, #9
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d039      	beq.n	80054e6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	4413      	add	r3, r2
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	8952      	ldrh	r2, [r2, #10]
 800547c:	4293      	cmp	r3, r2
 800547e:	d905      	bls.n	800548c <f_read+0x148>
					cc = fs->csize - csect;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	895b      	ldrh	r3, [r3, #10]
 8005484:	461a      	mov	r2, r3
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	7858      	ldrb	r0, [r3, #1]
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005496:	f7fe f853 	bl	8003540 <disk_read>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <f_read+0x166>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2201      	movs	r2, #1
 80054a4:	755a      	strb	r2, [r3, #21]
 80054a6:	2301      	movs	r3, #1
 80054a8:	e087      	b.n	80055ba <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	7d1b      	ldrb	r3, [r3, #20]
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da14      	bge.n	80054de <f_read+0x19a>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054be:	429a      	cmp	r2, r3
 80054c0:	d90d      	bls.n	80054de <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	025b      	lsls	r3, r3, #9
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	18d0      	adds	r0, r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3330      	adds	r3, #48	; 0x30
 80054d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d8:	4619      	mov	r1, r3
 80054da:	f7fe f911 	bl	8003700 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	025b      	lsls	r3, r3, #9
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80054e4:	e050      	b.n	8005588 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d02e      	beq.n	800554e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	7d1b      	ldrb	r3, [r3, #20]
 80054f4:	b25b      	sxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da18      	bge.n	800552c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	7858      	ldrb	r0, [r3, #1]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	2301      	movs	r3, #1
 800550a:	f7fe f839 	bl	8003580 <disk_write>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <f_read+0x1da>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	755a      	strb	r2, [r3, #21]
 800551a:	2301      	movs	r3, #1
 800551c:	e04d      	b.n	80055ba <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	7d1b      	ldrb	r3, [r3, #20]
 8005522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005526:	b2da      	uxtb	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	7858      	ldrb	r0, [r3, #1]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005536:	2301      	movs	r3, #1
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	f7fe f801 	bl	8003540 <disk_read>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <f_read+0x20a>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	755a      	strb	r2, [r3, #21]
 800554a:	2301      	movs	r3, #1
 800554c:	e035      	b.n	80055ba <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d901      	bls.n	800556e <f_read+0x22a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557c:	4413      	add	r3, r2
 800557e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005580:	4619      	mov	r1, r3
 8005582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005584:	f7fe f8bc 	bl	8003700 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	4413      	add	r3, r2
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	441a      	add	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	619a      	str	r2, [r3, #24]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	441a      	add	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f47f af01 	bne.w	80053ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3738      	adds	r7, #56	; 0x38
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b08c      	sub	sp, #48	; 0x30
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f107 0210 	add.w	r2, r7, #16
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fc74 	bl	8004ed0 <validate>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80055ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d107      	bne.n	8005606 <f_write+0x44>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	7d5b      	ldrb	r3, [r3, #21]
 80055fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80055fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <f_write+0x4a>
 8005606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800560a:	e14b      	b.n	80058a4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	7d1b      	ldrb	r3, [r3, #20]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <f_write+0x5a>
 8005618:	2307      	movs	r3, #7
 800561a:	e143      	b.n	80058a4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	441a      	add	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	429a      	cmp	r2, r3
 800562a:	f080 812d 	bcs.w	8005888 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	43db      	mvns	r3, r3
 8005634:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005636:	e127      	b.n	8005888 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005640:	2b00      	cmp	r3, #0
 8005642:	f040 80e3 	bne.w	800580c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	0a5b      	lsrs	r3, r3, #9
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	8952      	ldrh	r2, [r2, #10]
 8005650:	3a01      	subs	r2, #1
 8005652:	4013      	ands	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d143      	bne.n	80056e4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10c      	bne.n	800567e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	2b00      	cmp	r3, #0
 800566e:	d11a      	bne.n	80056a6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe fd25 	bl	80040c4 <create_chain>
 800567a:	62b8      	str	r0, [r7, #40]	; 0x28
 800567c:	e013      	b.n	80056a6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	4619      	mov	r1, r3
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7fe fdb1 	bl	80041f4 <clmt_clust>
 8005692:	62b8      	str	r0, [r7, #40]	; 0x28
 8005694:	e007      	b.n	80056a6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f7fe fd10 	bl	80040c4 <create_chain>
 80056a4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80f2 	beq.w	8005892 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d104      	bne.n	80056be <f_write+0xfc>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2202      	movs	r2, #2
 80056b8:	755a      	strb	r2, [r3, #21]
 80056ba:	2302      	movs	r3, #2
 80056bc:	e0f2      	b.n	80058a4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d104      	bne.n	80056d0 <f_write+0x10e>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	755a      	strb	r2, [r3, #21]
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0e9      	b.n	80058a4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <f_write+0x122>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	7d1b      	ldrb	r3, [r3, #20]
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da18      	bge.n	8005720 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	7858      	ldrb	r0, [r3, #1]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a1a      	ldr	r2, [r3, #32]
 80056fc:	2301      	movs	r3, #1
 80056fe:	f7fd ff3f 	bl	8003580 <disk_write>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d004      	beq.n	8005712 <f_write+0x150>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	755a      	strb	r2, [r3, #21]
 800570e:	2301      	movs	r3, #1
 8005710:	e0c8      	b.n	80058a4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	7d1b      	ldrb	r3, [r3, #20]
 8005716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4619      	mov	r1, r3
 8005728:	4610      	mov	r0, r2
 800572a:	f7fe fab3 	bl	8003c94 <clust2sect>
 800572e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <f_write+0x17e>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2202      	movs	r2, #2
 800573a:	755a      	strb	r2, [r3, #21]
 800573c:	2302      	movs	r3, #2
 800573e:	e0b1      	b.n	80058a4 <f_write+0x2e2>
			sect += csect;
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	4413      	add	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	0a5b      	lsrs	r3, r3, #9
 800574c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d03c      	beq.n	80057ce <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	4413      	add	r3, r2
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	8952      	ldrh	r2, [r2, #10]
 800575e:	4293      	cmp	r3, r2
 8005760:	d905      	bls.n	800576e <f_write+0x1ac>
					cc = fs->csize - csect;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	895b      	ldrh	r3, [r3, #10]
 8005766:	461a      	mov	r2, r3
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	7858      	ldrb	r0, [r3, #1]
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	69f9      	ldr	r1, [r7, #28]
 8005778:	f7fd ff02 	bl	8003580 <disk_write>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <f_write+0x1ca>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	755a      	strb	r2, [r3, #21]
 8005788:	2301      	movs	r3, #1
 800578a:	e08b      	b.n	80058a4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1a      	ldr	r2, [r3, #32]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	6a3a      	ldr	r2, [r7, #32]
 8005796:	429a      	cmp	r2, r3
 8005798:	d915      	bls.n	80057c6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	025b      	lsls	r3, r3, #9
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b2:	4619      	mov	r1, r3
 80057b4:	f7fd ffa4 	bl	8003700 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	7d1b      	ldrb	r3, [r3, #20]
 80057bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	025b      	lsls	r3, r3, #9
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80057cc:	e03f      	b.n	800584e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d016      	beq.n	8005806 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	699a      	ldr	r2, [r3, #24]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d210      	bcs.n	8005806 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	7858      	ldrb	r0, [r3, #1]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057ee:	2301      	movs	r3, #1
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	f7fd fea5 	bl	8003540 <disk_read>
 80057f6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	755a      	strb	r2, [r3, #21]
 8005802:	2301      	movs	r3, #1
 8005804:	e04e      	b.n	80058a4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005814:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	429a      	cmp	r2, r3
 8005820:	d901      	bls.n	8005826 <f_write+0x264>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005834:	4413      	add	r3, r2
 8005836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005838:	69f9      	ldr	r1, [r7, #28]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fd ff60 	bl	8003700 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	7d1b      	ldrb	r3, [r3, #20]
 8005844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	4413      	add	r3, r2
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	441a      	add	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	619a      	str	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	429a      	cmp	r2, r3
 800586c:	bf38      	it	cc
 800586e:	461a      	movcc	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	60da      	str	r2, [r3, #12]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	441a      	add	r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f47f aed4 	bne.w	8005638 <f_write+0x76>
 8005890:	e000      	b.n	8005894 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005892:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	7d1b      	ldrb	r3, [r3, #20]
 8005898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3730      	adds	r7, #48	; 0x30
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f107 0208 	add.w	r2, r7, #8
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fb07 	bl	8004ed0 <validate>
 80058c2:	4603      	mov	r3, r0
 80058c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d168      	bne.n	800599e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	7d1b      	ldrb	r3, [r3, #20]
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d062      	beq.n	800599e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	7d1b      	ldrb	r3, [r3, #20]
 80058dc:	b25b      	sxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da15      	bge.n	800590e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	7858      	ldrb	r0, [r3, #1]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	2301      	movs	r3, #1
 80058f2:	f7fd fe45 	bl	8003580 <disk_write>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <f_sync+0x54>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e04f      	b.n	80059a0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	7d1b      	ldrb	r3, [r3, #20]
 8005904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005908:	b2da      	uxtb	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800590e:	f7fd fc85 	bl	800321c <get_fattime>
 8005912:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f7fe f91d 	bl	8003b5c <move_window>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d138      	bne.n	800599e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	330b      	adds	r3, #11
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	330b      	adds	r3, #11
 800593c:	f042 0220 	orr.w	r2, r2, #32
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	461a      	mov	r2, r3
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	f7fe fe2a 	bl	80045a8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f103 021c 	add.w	r2, r3, #28
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f7fd fea1 	bl	80036a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3316      	adds	r3, #22
 800596a:	6939      	ldr	r1, [r7, #16]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fd fe9b 	bl	80036a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3312      	adds	r3, #18
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f7fd fe7a 	bl	8003672 <st_word>
					fs->wflag = 1;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2201      	movs	r2, #1
 8005982:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe f916 	bl	8003bb8 <sync_fs>
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	7d1b      	ldrb	r3, [r3, #20]
 8005994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005998:	b2da      	uxtb	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800599e:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff ff7b 	bl	80058ac <f_sync>
 80059b6:	4603      	mov	r3, r0
 80059b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d118      	bne.n	80059f2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f107 0208 	add.w	r2, r7, #8
 80059c6:	4611      	mov	r1, r2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff fa81 	bl	8004ed0 <validate>
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10c      	bne.n	80059f2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe f819 	bl	8003a14 <dec_lock>
 80059e2:	4603      	mov	r3, r0
 80059e4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b09d      	sub	sp, #116	; 0x74
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8005a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a14:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8005a16:	f107 030c 	add.w	r3, r7, #12
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe ff71 	bl	8004902 <get_ldnumber>
 8005a20:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da02      	bge.n	8005a2e <f_mkfs+0x32>
 8005a28:	230b      	movs	r3, #11
 8005a2a:	f000 bc0d 	b.w	8006248 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8005a2e:	4a94      	ldr	r2, [pc, #592]	; (8005c80 <f_mkfs+0x284>)
 8005a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <f_mkfs+0x4a>
 8005a3a:	4a91      	ldr	r2, [pc, #580]	; (8005c80 <f_mkfs+0x284>)
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8005a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8005a52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fd fd4c 	bl	80034f4 <disk_initialize>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8005a62:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <f_mkfs+0x76>
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e3ea      	b.n	8006248 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8005a72:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <f_mkfs+0x86>
 8005a7e:	230a      	movs	r3, #10
 8005a80:	e3e2      	b.n	8006248 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8005a82:	f107 0214 	add.w	r2, r7, #20
 8005a86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005a8a:	2103      	movs	r1, #3
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fd fd97 	bl	80035c0 <disk_ioctl>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10c      	bne.n	8005ab2 <f_mkfs+0xb6>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <f_mkfs+0xb6>
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa4:	d805      	bhi.n	8005ab2 <f_mkfs+0xb6>
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <f_mkfs+0xba>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8005ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aba:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <f_mkfs+0xce>
 8005ac2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d309      	bcc.n	8005ade <f_mkfs+0xe2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ad0:	d805      	bhi.n	8005ade <f_mkfs+0xe2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <f_mkfs+0xe6>
 8005ade:	2313      	movs	r3, #19
 8005ae0:	e3b2      	b.n	8006248 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8005ae2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8005af0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8005afc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	fb02 f303 	mul.w	r3, r2, r3
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <f_mkfs+0x114>
 8005b0c:	230e      	movs	r3, #14
 8005b0e:	e39b      	b.n	8006248 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8005b10:	f107 0210 	add.w	r2, r7, #16
 8005b14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005b18:	2101      	movs	r1, #1
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fd fd50 	bl	80035c0 <disk_ioctl>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <f_mkfs+0x12e>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e38e      	b.n	8006248 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8005b2a:	7afb      	ldrb	r3, [r7, #11]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <f_mkfs+0x13c>
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <f_mkfs+0x13e>
 8005b38:	233f      	movs	r3, #63	; 0x3f
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d901      	bls.n	8005b48 <f_mkfs+0x14c>
 8005b44:	230e      	movs	r3, #14
 8005b46:	e37f      	b.n	8006248 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b7f      	cmp	r3, #127	; 0x7f
 8005b54:	d801      	bhi.n	8005b5a <f_mkfs+0x15e>
 8005b56:	230e      	movs	r3, #14
 8005b58:	e376      	b.n	8006248 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b80      	cmp	r3, #128	; 0x80
 8005b5e:	d901      	bls.n	8005b64 <f_mkfs+0x168>
 8005b60:	2313      	movs	r3, #19
 8005b62:	e371      	b.n	8006248 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d004      	beq.n	8005b82 <f_mkfs+0x186>
 8005b78:	7afb      	ldrb	r3, [r7, #11]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d103      	bne.n	8005b8a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8005b82:	2303      	movs	r3, #3
 8005b84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005b88:	e009      	b.n	8005b9e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8005b8a:	7afb      	ldrb	r3, [r7, #11]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <f_mkfs+0x19c>
 8005b94:	2313      	movs	r3, #19
 8005b96:	e357      	b.n	8006248 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8005ba2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d13c      	bne.n	8005c24 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8005baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11b      	bne.n	8005be8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	0c5b      	lsrs	r3, r3, #17
 8005bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bba:	2301      	movs	r3, #1
 8005bbc:	653b      	str	r3, [r7, #80]	; 0x50
 8005bbe:	e005      	b.n	8005bcc <f_mkfs+0x1d0>
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	653b      	str	r3, [r7, #80]	; 0x50
 8005bcc:	4a2d      	ldr	r2, [pc, #180]	; (8005c84 <f_mkfs+0x288>)
 8005bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <f_mkfs+0x1ec>
 8005bd8:	4a2a      	ldr	r2, [pc, #168]	; (8005c84 <f_mkfs+0x288>)
 8005bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d2eb      	bcs.n	8005bc0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	009a      	lsls	r2, r3, #2
 8005bf8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bfa:	4413      	add	r3, r2
 8005bfc:	1e5a      	subs	r2, r3, #1
 8005bfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8005c06:	2320      	movs	r3, #32
 8005c08:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d903      	bls.n	8005c20 <f_mkfs+0x224>
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <f_mkfs+0x28c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d952      	bls.n	8005cc6 <f_mkfs+0x2ca>
 8005c20:	230e      	movs	r3, #14
 8005c22:	e311      	b.n	8006248 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8005c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d11b      	bne.n	8005c62 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	0b1b      	lsrs	r3, r3, #12
 8005c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8005c30:	2300      	movs	r3, #0
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c34:	2301      	movs	r3, #1
 8005c36:	653b      	str	r3, [r7, #80]	; 0x50
 8005c38:	e005      	b.n	8005c46 <f_mkfs+0x24a>
 8005c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	653b      	str	r3, [r7, #80]	; 0x50
 8005c46:	4a11      	ldr	r2, [pc, #68]	; (8005c8c <f_mkfs+0x290>)
 8005c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <f_mkfs+0x266>
 8005c52:	4a0e      	ldr	r2, [pc, #56]	; (8005c8c <f_mkfs+0x290>)
 8005c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d2eb      	bcs.n	8005c3a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d90c      	bls.n	8005c90 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	3302      	adds	r3, #2
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c7e:	e012      	b.n	8005ca6 <f_mkfs+0x2aa>
 8005c80:	20000714 	.word	0x20000714
 8005c84:	08006520 	.word	0x08006520
 8005c88:	0ffffff5 	.word	0x0ffffff5
 8005c8c:	08006530 	.word	0x08006530
				} else {
					fmt = FS_FAT12;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8005c96:	6a3a      	ldr	r2, [r7, #32]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	3303      	adds	r3, #3
 8005ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8005ca6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005caa:	4413      	add	r3, r2
 8005cac:	1e5a      	subs	r2, r3, #1
 8005cae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8005cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8005cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cca:	4413      	add	r3, r2
 8005ccc:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8005cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd2:	fb03 f202 	mul.w	r2, r3, r2
 8005cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cd8:	4413      	add	r3, r2
 8005cda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cdc:	4413      	add	r3, r2
 8005cde:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	1e5a      	subs	r2, r3, #1
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	425b      	negs	r3, r3
 8005cec:	401a      	ands	r2, r3
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8005cf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d108      	bne.n	8005d0e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8005cfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d00:	4413      	add	r3, r2
 8005d02:	657b      	str	r3, [r7, #84]	; 0x54
 8005d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d08:	4413      	add	r3, r2
 8005d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d0c:	e006      	b.n	8005d1c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8005d0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d18:	4413      	add	r3, r2
 8005d1a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8005d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d1e:	011a      	lsls	r2, r3, #4
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	441a      	add	r2, r3
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d901      	bls.n	8005d32 <f_mkfs+0x336>
 8005d2e:	230e      	movs	r3, #14
 8005d30:	e28a      	b.n	8006248 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d44:	1ad2      	subs	r2, r2, r3
 8005d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8005d4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d10f      	bne.n	8005d76 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d80a      	bhi.n	8005d76 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d105      	bne.n	8005d72 <f_mkfs+0x376>
 8005d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d68:	085b      	lsrs	r3, r3, #1
 8005d6a:	607b      	str	r3, [r7, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d144      	bne.n	8005dfc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8005d72:	230e      	movs	r3, #14
 8005d74:	e268      	b.n	8006248 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8005d76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d133      	bne.n	8005de6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d91e      	bls.n	8005dc6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d107      	bne.n	8005d9e <f_mkfs+0x3a2>
 8005d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	d803      	bhi.n	8005d9e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8005d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	607b      	str	r3, [r7, #4]
 8005d9c:	e033      	b.n	8005e06 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8005d9e:	7afb      	ldrb	r3, [r7, #11]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8005da8:	2303      	movs	r3, #3
 8005daa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005dae:	e02a      	b.n	8005e06 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <f_mkfs+0x3c6>
 8005db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	607b      	str	r3, [r7, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d91e      	bls.n	8005e00 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8005dc2:	230e      	movs	r3, #14
 8005dc4:	e240      	b.n	8006248 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d80a      	bhi.n	8005de6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d105      	bne.n	8005de2 <f_mkfs+0x3e6>
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d910      	bls.n	8005e04 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8005de2:	230e      	movs	r3, #14
 8005de4:	e230      	b.n	8006248 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8005de6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d10c      	bne.n	8005e08 <f_mkfs+0x40c>
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d907      	bls.n	8005e08 <f_mkfs+0x40c>
 8005df8:	230e      	movs	r3, #14
 8005dfa:	e225      	b.n	8006248 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8005dfc:	bf00      	nop
 8005dfe:	e6ce      	b.n	8005b9e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8005e00:	bf00      	nop
 8005e02:	e6cc      	b.n	8005b9e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8005e04:	bf00      	nop
			pau = au;
 8005e06:	e6ca      	b.n	8005b9e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8005e08:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8005e0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2100      	movs	r1, #0
 8005e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e12:	f7fd fc96 	bl	8003742 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8005e16:	220b      	movs	r2, #11
 8005e18:	49b2      	ldr	r1, [pc, #712]	; (80060e4 <f_mkfs+0x6e8>)
 8005e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e1c:	f7fd fc70 	bl	8003700 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	330b      	adds	r3, #11
 8005e24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e26:	4611      	mov	r1, r2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fd fc22 	bl	8003672 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	330d      	adds	r3, #13
 8005e32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	330e      	adds	r3, #14
 8005e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e3e:	b292      	uxth	r2, r2
 8005e40:	4611      	mov	r1, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fd fc15 	bl	8003672 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	3310      	adds	r3, #16
 8005e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e54:	f103 0211 	add.w	r2, r3, #17
 8005e58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d002      	beq.n	8005e66 <f_mkfs+0x46a>
 8005e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	e000      	b.n	8005e68 <f_mkfs+0x46c>
 8005e66:	2300      	movs	r3, #0
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f7fd fc01 	bl	8003672 <st_word>
		if (sz_vol < 0x10000) {
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e76:	d208      	bcs.n	8005e8a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	3313      	adds	r3, #19
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	b292      	uxth	r2, r2
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fd fbf5 	bl	8003672 <st_word>
 8005e88:	e006      	b.n	8005e98 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	3320      	adds	r3, #32
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fd fc08 	bl	80036a8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	3315      	adds	r3, #21
 8005e9c:	22f8      	movs	r2, #248	; 0xf8
 8005e9e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	3318      	adds	r3, #24
 8005ea4:	213f      	movs	r1, #63	; 0x3f
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fd fbe3 	bl	8003672 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	331a      	adds	r3, #26
 8005eb0:	21ff      	movs	r1, #255	; 0xff
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fd fbdd 	bl	8003672 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	331c      	adds	r3, #28
 8005ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fd fbf2 	bl	80036a8 <st_dword>
		if (fmt == FS_FAT32) {
 8005ec4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d131      	bne.n	8005f30 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8005ed2:	f7fd f9a3 	bl	800321c <get_fattime>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7fd fbe4 	bl	80036a8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	3324      	adds	r3, #36	; 0x24
 8005ee4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fd fbde 	bl	80036a8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	332c      	adds	r3, #44	; 0x2c
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fd fbd8 	bl	80036a8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	3330      	adds	r3, #48	; 0x30
 8005efc:	2101      	movs	r1, #1
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fd fbb7 	bl	8003672 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	3332      	adds	r3, #50	; 0x32
 8005f08:	2106      	movs	r1, #6
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fd fbb1 	bl	8003672 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	3340      	adds	r3, #64	; 0x40
 8005f14:	2280      	movs	r2, #128	; 0x80
 8005f16:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	3342      	adds	r3, #66	; 0x42
 8005f1c:	2229      	movs	r2, #41	; 0x29
 8005f1e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	3347      	adds	r3, #71	; 0x47
 8005f24:	2213      	movs	r2, #19
 8005f26:	4970      	ldr	r1, [pc, #448]	; (80060e8 <f_mkfs+0x6ec>)
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fd fbe9 	bl	8003700 <mem_cpy>
 8005f2e:	e020      	b.n	8005f72 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8005f36:	f7fd f971 	bl	800321c <get_fattime>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7fd fbb2 	bl	80036a8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	3316      	adds	r3, #22
 8005f48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f4a:	b292      	uxth	r2, r2
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fd fb8f 	bl	8003672 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	3324      	adds	r3, #36	; 0x24
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	3326      	adds	r3, #38	; 0x26
 8005f60:	2229      	movs	r2, #41	; 0x29
 8005f62:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	332b      	adds	r3, #43	; 0x2b
 8005f68:	2213      	movs	r2, #19
 8005f6a:	4960      	ldr	r1, [pc, #384]	; (80060ec <f_mkfs+0x6f0>)
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fd fbc7 	bl	8003700 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f78:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fd fb78 	bl	8003672 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8005f82:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8005f86:	2301      	movs	r3, #1
 8005f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f8c:	f7fd faf8 	bl	8003580 <disk_write>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <f_mkfs+0x59e>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e156      	b.n	8006248 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8005f9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d140      	bne.n	8006024 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	1d9a      	adds	r2, r3, #6
 8005fa6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8005faa:	2301      	movs	r3, #1
 8005fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fae:	f7fd fae7 	bl	8003580 <disk_write>
			mem_set(buf, 0, ss);
 8005fb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fba:	f7fd fbc2 	bl	8003742 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8005fbe:	494c      	ldr	r1, [pc, #304]	; (80060f0 <f_mkfs+0x6f4>)
 8005fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fc2:	f7fd fb71 	bl	80036a8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005fcc:	4949      	ldr	r1, [pc, #292]	; (80060f4 <f_mkfs+0x6f8>)
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd fb6a 	bl	80036a8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	f7fd fb61 	bl	80036a8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005fec:	2102      	movs	r1, #2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fd fb5a 	bl	80036a8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ffa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fd fb37 	bl	8003672 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	1dda      	adds	r2, r3, #7
 8006008:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800600c:	2301      	movs	r3, #1
 800600e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006010:	f7fd fab6 	bl	8003580 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800601c:	2301      	movs	r3, #1
 800601e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006020:	f7fd faae 	bl	8003580 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8006024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006026:	2100      	movs	r1, #0
 8006028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800602a:	f7fd fb8a 	bl	8003742 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800602e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006030:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8006032:	2300      	movs	r3, #0
 8006034:	64bb      	str	r3, [r7, #72]	; 0x48
 8006036:	e04b      	b.n	80060d0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8006038:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800603c:	2b03      	cmp	r3, #3
 800603e:	d113      	bne.n	8006068 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8006040:	f06f 0107 	mvn.w	r1, #7
 8006044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006046:	f7fd fb2f 	bl	80036a8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	3304      	adds	r3, #4
 800604e:	f04f 31ff 	mov.w	r1, #4294967295
 8006052:	4618      	mov	r0, r3
 8006054:	f7fd fb28 	bl	80036a8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	3308      	adds	r3, #8
 800605c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006060:	4618      	mov	r0, r3
 8006062:	f7fd fb21 	bl	80036a8 <st_dword>
 8006066:	e00b      	b.n	8006080 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8006068:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <f_mkfs+0x678>
 8006070:	4b21      	ldr	r3, [pc, #132]	; (80060f8 <f_mkfs+0x6fc>)
 8006072:	e001      	b.n	8006078 <f_mkfs+0x67c>
 8006074:	f06f 0307 	mvn.w	r3, #7
 8006078:	4619      	mov	r1, r3
 800607a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800607c:	f7fd fb14 	bl	80036a8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8006080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006082:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8006084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	4293      	cmp	r3, r2
 800608a:	bf28      	it	cs
 800608c:	4613      	movcs	r3, r2
 800608e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8006090:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006096:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800609a:	f7fd fa71 	bl	8003580 <disk_write>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <f_mkfs+0x6ac>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e0cf      	b.n	8006248 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80060a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060aa:	461a      	mov	r2, r3
 80060ac:	2100      	movs	r1, #0
 80060ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b0:	f7fd fb47 	bl	8003742 <mem_set>
				sect += n; nsect -= n;
 80060b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b8:	4413      	add	r3, r2
 80060ba:	667b      	str	r3, [r7, #100]	; 0x64
 80060bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80060c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1dc      	bne.n	8006084 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80060ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060cc:	3301      	adds	r3, #1
 80060ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d3af      	bcc.n	8006038 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80060d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d10d      	bne.n	80060fc <f_mkfs+0x700>
 80060e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e2:	e00c      	b.n	80060fe <f_mkfs+0x702>
 80060e4:	08006448 	.word	0x08006448
 80060e8:	08006454 	.word	0x08006454
 80060ec:	08006468 	.word	0x08006468
 80060f0:	41615252 	.word	0x41615252
 80060f4:	61417272 	.word	0x61417272
 80060f8:	00fffff8 	.word	0x00fffff8
 80060fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fe:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8006100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	4293      	cmp	r3, r2
 8006106:	bf28      	it	cs
 8006108:	4613      	movcs	r3, r2
 800610a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800610c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006112:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006114:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006116:	f7fd fa33 	bl	8003580 <disk_write>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <f_mkfs+0x728>
 8006120:	2301      	movs	r3, #1
 8006122:	e091      	b.n	8006248 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8006124:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006128:	4413      	add	r3, r2
 800612a:	667b      	str	r3, [r7, #100]	; 0x64
 800612c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800612e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8006134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e2      	bne.n	8006100 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800613a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800613e:	2b03      	cmp	r3, #3
 8006140:	d103      	bne.n	800614a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8006142:	230c      	movs	r3, #12
 8006144:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006148:	e010      	b.n	800616c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006150:	d303      	bcc.n	800615a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8006152:	2306      	movs	r3, #6
 8006154:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006158:	e008      	b.n	800616c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800615a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800615e:	2b02      	cmp	r3, #2
 8006160:	d101      	bne.n	8006166 <f_mkfs+0x76a>
 8006162:	2304      	movs	r3, #4
 8006164:	e000      	b.n	8006168 <f_mkfs+0x76c>
 8006166:	2301      	movs	r3, #1
 8006168:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800616c:	7afb      	ldrb	r3, [r7, #11]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d15b      	bne.n	800622e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8006176:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006178:	461a      	mov	r2, r3
 800617a:	2100      	movs	r1, #0
 800617c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800617e:	f7fd fae0 	bl	8003742 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006188:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800618c:	4618      	mov	r0, r3
 800618e:	f7fd fa70 	bl	8003672 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006198:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	3301      	adds	r3, #1
 80061a4:	2201      	movs	r2, #1
 80061a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	3302      	adds	r3, #2
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	3303      	adds	r3, #3
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	3304      	adds	r3, #4
 80061bc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80061c0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	441a      	add	r2, r3
 80061c8:	4b21      	ldr	r3, [pc, #132]	; (8006250 <f_mkfs+0x854>)
 80061ca:	fba3 1302 	umull	r1, r3, r3, r2
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	0852      	lsrs	r2, r2, #1
 80061d2:	4413      	add	r3, r2
 80061d4:	0b5b      	lsrs	r3, r3, #13
 80061d6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	3305      	adds	r3, #5
 80061dc:	22fe      	movs	r2, #254	; 0xfe
 80061de:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80061e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e2:	089b      	lsrs	r3, r3, #2
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	3306      	adds	r3, #6
 80061ea:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	3307      	adds	r3, #7
 80061f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	3308      	adds	r3, #8
 8006200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006202:	4618      	mov	r0, r3
 8006204:	f7fd fa50 	bl	80036a8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	330c      	adds	r3, #12
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4611      	mov	r1, r2
 8006210:	4618      	mov	r0, r3
 8006212:	f7fd fa49 	bl	80036a8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8006216:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800621a:	2301      	movs	r3, #1
 800621c:	2200      	movs	r2, #0
 800621e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006220:	f7fd f9ae 	bl	8003580 <disk_write>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <f_mkfs+0x832>
 800622a:	2301      	movs	r3, #1
 800622c:	e00c      	b.n	8006248 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800622e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006232:	2200      	movs	r2, #0
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f7fd f9c2 	bl	80035c0 <disk_ioctl>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <f_mkfs+0x84a>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <f_mkfs+0x84c>

	return FR_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3774      	adds	r7, #116	; 0x74
 800624c:	46bd      	mov	sp, r7
 800624e:	bd90      	pop	{r4, r7, pc}
 8006250:	0515565b 	.word	0x0515565b

08006254 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800626a:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <FATFS_LinkDriverEx+0x94>)
 800626c:	7a5b      	ldrb	r3, [r3, #9]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d131      	bne.n	80062d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006274:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <FATFS_LinkDriverEx+0x94>)
 8006276:	7a5b      	ldrb	r3, [r3, #9]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <FATFS_LinkDriverEx+0x94>)
 800627e:	2100      	movs	r1, #0
 8006280:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006282:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <FATFS_LinkDriverEx+0x94>)
 8006284:	7a5b      	ldrb	r3, [r3, #9]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <FATFS_LinkDriverEx+0x94>)
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006292:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <FATFS_LinkDriverEx+0x94>)
 8006294:	7a5b      	ldrb	r3, [r3, #9]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <FATFS_LinkDriverEx+0x94>)
 800629c:	4413      	add	r3, r2
 800629e:	79fa      	ldrb	r2, [r7, #7]
 80062a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80062a2:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <FATFS_LinkDriverEx+0x94>)
 80062a4:	7a5b      	ldrb	r3, [r3, #9]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	b2d1      	uxtb	r1, r2
 80062ac:	4a0e      	ldr	r2, [pc, #56]	; (80062e8 <FATFS_LinkDriverEx+0x94>)
 80062ae:	7251      	strb	r1, [r2, #9]
 80062b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80062b2:	7dbb      	ldrb	r3, [r7, #22]
 80062b4:	3330      	adds	r3, #48	; 0x30
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	3301      	adds	r3, #1
 80062c0:	223a      	movs	r2, #58	; 0x3a
 80062c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	3302      	adds	r3, #2
 80062c8:	222f      	movs	r2, #47	; 0x2f
 80062ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	3303      	adds	r3, #3
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	2000073c 	.word	0x2000073c

080062ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80062f6:	2200      	movs	r2, #0
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff ffaa 	bl	8006254 <FATFS_LinkDriverEx>
 8006300:	4603      	mov	r3, r0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8006320:	4b15      	ldr	r3, [pc, #84]	; (8006378 <FATFS_UnLinkDriverEx+0x6c>)
 8006322:	7a5b      	ldrb	r3, [r3, #9]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01e      	beq.n	8006368 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	3b30      	subs	r3, #48	; 0x30
 8006330:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	4a10      	ldr	r2, [pc, #64]	; (8006378 <FATFS_UnLinkDriverEx+0x6c>)
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d013      	beq.n	8006368 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	4a0d      	ldr	r2, [pc, #52]	; (8006378 <FATFS_UnLinkDriverEx+0x6c>)
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	2200      	movs	r2, #0
 800634a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <FATFS_UnLinkDriverEx+0x6c>)
 8006350:	4413      	add	r3, r2
 8006352:	2200      	movs	r2, #0
 8006354:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8006356:	4b08      	ldr	r3, [pc, #32]	; (8006378 <FATFS_UnLinkDriverEx+0x6c>)
 8006358:	7a5b      	ldrb	r3, [r3, #9]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b2da      	uxtb	r2, r3
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <FATFS_UnLinkDriverEx+0x6c>)
 8006362:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	2000073c 	.word	0x2000073c

0800637c <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8006384:	2100      	movs	r1, #0
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff ffc0 	bl	800630c <FATFS_UnLinkDriverEx>
 800638c:	4603      	mov	r3, r0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <__libc_init_array>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	4d0d      	ldr	r5, [pc, #52]	; (80063d0 <__libc_init_array+0x38>)
 800639c:	4c0d      	ldr	r4, [pc, #52]	; (80063d4 <__libc_init_array+0x3c>)
 800639e:	1b64      	subs	r4, r4, r5
 80063a0:	10a4      	asrs	r4, r4, #2
 80063a2:	2600      	movs	r6, #0
 80063a4:	42a6      	cmp	r6, r4
 80063a6:	d109      	bne.n	80063bc <__libc_init_array+0x24>
 80063a8:	4d0b      	ldr	r5, [pc, #44]	; (80063d8 <__libc_init_array+0x40>)
 80063aa:	4c0c      	ldr	r4, [pc, #48]	; (80063dc <__libc_init_array+0x44>)
 80063ac:	f000 f820 	bl	80063f0 <_init>
 80063b0:	1b64      	subs	r4, r4, r5
 80063b2:	10a4      	asrs	r4, r4, #2
 80063b4:	2600      	movs	r6, #0
 80063b6:	42a6      	cmp	r6, r4
 80063b8:	d105      	bne.n	80063c6 <__libc_init_array+0x2e>
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c0:	4798      	blx	r3
 80063c2:	3601      	adds	r6, #1
 80063c4:	e7ee      	b.n	80063a4 <__libc_init_array+0xc>
 80063c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ca:	4798      	blx	r3
 80063cc:	3601      	adds	r6, #1
 80063ce:	e7f2      	b.n	80063b6 <__libc_init_array+0x1e>
 80063d0:	08006548 	.word	0x08006548
 80063d4:	08006548 	.word	0x08006548
 80063d8:	08006548 	.word	0x08006548
 80063dc:	0800654c 	.word	0x0800654c

080063e0 <memset>:
 80063e0:	4402      	add	r2, r0
 80063e2:	4603      	mov	r3, r0
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d100      	bne.n	80063ea <memset+0xa>
 80063e8:	4770      	bx	lr
 80063ea:	f803 1b01 	strb.w	r1, [r3], #1
 80063ee:	e7f9      	b.n	80063e4 <memset+0x4>

080063f0 <_init>:
 80063f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f2:	bf00      	nop
 80063f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f6:	bc08      	pop	{r3}
 80063f8:	469e      	mov	lr, r3
 80063fa:	4770      	bx	lr

080063fc <_fini>:
 80063fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fe:	bf00      	nop
 8006400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006402:	bc08      	pop	{r3}
 8006404:	469e      	mov	lr, r3
 8006406:	4770      	bx	lr
